# Resources to be used as redirect destinations.
#
# - Each distinct resource entry is separated by an empty line.
# - The first line in a resource entry is: token mime-type[;encoding]
# - Optional aliases may follow, one per line: alias alternativetoken
# - All following lines are the data. An empty line signals the end of the
#   data.
#
# Mind that application/javascript scriptlet resources' names/aliases always end with: .js
#
# If the encoding is absent, the data will be converted to base64, and the
# encoding will be set to `;base64`.
#
# Put comments only before metadata or after the line signaling the end of data.


# http://probablyprogramming.com/2009/03/15/the-tiniest-gif-ever
1x1.gif image/gif;base64
alias 1x1-transparent.gif
R0lGODlhAQABAAAAACH5BAEKAAEALAAAAAABAAEAAAICTAEAOw==


2x2.png image/png;base64
alias 2x2-transparent.png
iVBORw0KGgoAAAANSUhEUgAAAAIAAAACCAYAAABytg0kAAAAC0lEQVQI12NgQAcAABIAAe+JVKQAAAAA
SUVORK5CYII=


3x2.png image/png;base64
alias 3x2-transparent.png
iVBORw0KGgoAAAANSUhEUgAAAAMAAAACCAYAAACddGYaAAAAC0lEQVQI12NgwAUAABoAASRETuUAAAAA
SUVORK5CYII=


32x32.png image/png;base64
alias 32x32-transparent.png
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAGklEQVRYw+3BAQEAAACCIP+vbkhAAQAA
AO8GECAAAZf3V9cAAAAASUVORK5CYII=


noop.txt text/plain
alias nooptext


noop.css text/css
alias noopcss


noop-vmap1.0.xml text/xml
alias noopvmap-1.0
<vmap:VMAP xmlns:vmap="http://www.iab.net/videosuite/vmap" version="1.0"></vmap:VMAP>


noop.js application/javascript
alias noopjs
alias abp-resource:blank-js
(function() {
	;
})();


noop.json application/json
alias noopjson
{}


noop.html text/html
alias noopframe
<!DOCTYPE html>
<html>
	<head><title></title></head>
	<body></body>
</html>


# From:
#   https://ubuntuforums.org/showthread.php?t=1911430&p=11624471#post11624471
# ffmpeg -ar 48000 -t 0.1 -f s16le -acodec pcm_s16le -ac 2 -i /dev/zero -acodec libmp3lame -aq 4 output.mp3
# But with 0.1 (second) instead of 60.
noop-0.1s.mp3 audio/mp3;base64
alias noopmp3-0.1s
alias abp-resource:blank-mp3
SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU2LjQwLjEwMQAAAAAAAAAAAAAA//tUAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAAGAAADAABgYGBgYGBgYGBgYGBgYGBggICAgICA
gICAgICAgICAgICgoKCgoKCgoKCgoKCgoKCgwMDAwMDAwMDAwMDAwMDAwMDg4ODg4ODg4ODg4ODg4ODg
4P////////////////////8AAAAATGF2YzU2LjYwAAAAAAAAAAAAAAAAJAAAAAAAAAAAAwDNZKlY//sU
ZAAP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAETEFNRTMuOTkuNVVVVVVVVVVVVVVVVVVVVVVV
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZB4P8AAAaQAAAAgAAA0gAAABAAABpAAA
ACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
VVVVVVVVVVVV//sUZDwP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVV
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZFoP8AAAaQAAAAgA
AA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
VVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZHgP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVV
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sU
ZJYP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV

# From:
#   https://github.com/kud/blank-video
noop-1s.mp4 video/mp4;base64
alias noopmp4-1s
alias abp-resource:blank-mp4
AAAAHGZ0eXBNNFYgAAACAGlzb21pc28yYXZjMQAAAAhmcmVlAAAGF21kYXTeBAAAbGliZmFhYyAxLjI4
AABCAJMgBDIARwAAArEGBf//rdxF6b3m2Ui3lizYINkj7u94MjY0IC0gY29yZSAxNDIgcjIgOTU2Yzhk
OCAtIEguMjY0L01QRUctNCBBVkMgY29kZWMgLSBDb3B5bGVmdCAyMDAzLTIwMTQgLSBodHRwOi8vd3d3
LnZpZGVvbGFuLm9yZy94MjY0Lmh0bWwgLSBvcHRpb25zOiBjYWJhYz0wIHJlZj0zIGRlYmxvY2s9MTow
OjAgYW5hbHlzZT0weDE6MHgxMTEgbWU9aGV4IHN1Ym1lPTcgcHN5PTEgcHN5X3JkPTEuMDA6MC4wMCBt
aXhlZF9yZWY9MSBtZV9yYW5nZT0xNiBjaHJvbWFfbWU9MSB0cmVsbGlzPTEgOHg4ZGN0PTAgY3FtPTAg
ZGVhZHpvbmU9MjEsMTEgZmFzdF9wc2tpcD0xIGNocm9tYV9xcF9vZmZzZXQ9LTIgdGhyZWFkcz02IGxv
b2thaGVhZF90aHJlYWRzPTEgc2xpY2VkX3RocmVhZHM9MCBucj0wIGRlY2ltYXRlPTEgaW50ZXJsYWNl
ZD0wIGJsdXJheV9jb21wYXQ9MCBjb25zdHJhaW5lZF9pbnRyYT0wIGJmcmFtZXM9MCB3ZWlnaHRwPTAg
a2V5aW50PTI1MCBrZXlpbnRfbWluPTI1IHNjZW5lY3V0PTQwIGludHJhX3JlZnJlc2g9MCByY19sb29r
YWhlYWQ9NDAgcmM9Y3JmIG1idHJlZT0xIGNyZj0yMy4wIHFjb21wPTAuNjAgcXBtaW49MCBxcG1heD02
OSBxcHN0ZXA9NCB2YnZfbWF4cmF0ZT03NjggdmJ2X2J1ZnNpemU9MzAwMCBjcmZfbWF4PTAuMCBuYWxf
aHJkPW5vbmUgZmlsbGVyPTAgaXBfcmF0aW89MS40MCBhcT0xOjEuMDAAgAAAAFZliIQL8mKAAKvMnJyc
nJycnJycnXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXiEASZACGQAjgCEASZACGQAjgAAAAAdBmjgX4GSAIQBJkAIZACOAAAAAB0GaVAX4
GSAhAEmQAhkAI4AhAEmQAhkAI4AAAAAGQZpgL8DJIQBJkAIZACOAIQBJkAIZACOAAAAABkGagC/AySEA
SZACGQAjgAAAAAZBmqAvwMkhAEmQAhkAI4AhAEmQAhkAI4AAAAAGQZrAL8DJIQBJkAIZACOAAAAABkGa
4C/AySEASZACGQAjgCEASZACGQAjgAAAAAZBmwAvwMkhAEmQAhkAI4AAAAAGQZsgL8DJIQBJkAIZACOA
IQBJkAIZACOAAAAABkGbQC/AySEASZACGQAjgCEASZACGQAjgAAAAAZBm2AvwMkhAEmQAhkAI4AAAAAG
QZuAL8DJIQBJkAIZACOAIQBJkAIZACOAAAAABkGboC/AySEASZACGQAjgAAAAAZBm8AvwMkhAEmQAhkA
I4AhAEmQAhkAI4AAAAAGQZvgL8DJIQBJkAIZACOAAAAABkGaAC/AySEASZACGQAjgCEASZACGQAjgAAA
AAZBmiAvwMkhAEmQAhkAI4AhAEmQAhkAI4AAAAAGQZpAL8DJIQBJkAIZACOAAAAABkGaYC/AySEASZAC
GQAjgCEASZACGQAjgAAAAAZBmoAvwMkhAEmQAhkAI4AAAAAGQZqgL8DJIQBJkAIZACOAIQBJkAIZACOA
AAAABkGawC/AySEASZACGQAjgAAAAAZBmuAvwMkhAEmQAhkAI4AhAEmQAhkAI4AAAAAGQZsAL8DJIQBJ
kAIZACOAAAAABkGbIC/AySEASZACGQAjgCEASZACGQAjgAAAAAZBm0AvwMkhAEmQAhkAI4AhAEmQAhkA
I4AAAAAGQZtgL8DJIQBJkAIZACOAAAAABkGbgCvAySEASZACGQAjgCEASZACGQAjgAAAAAZBm6AnwMkh
AEmQAhkAI4AhAEmQAhkAI4AhAEmQAhkAI4AhAEmQAhkAI4AAAAhubW9vdgAAAGxtdmhkAAAAAAAAAAAA
AAAAAAAD6AAABDcAAQAAAQAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAABA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAzB0cmFrAAAAXHRraGQAAAADAAAAAAAAAAAA
AAABAAAAAAAAA+kAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAABA
AAAAALAAAACQAAAAAAAkZWR0cwAAABxlbHN0AAAAAAAAAAEAAAPpAAAAAAABAAAAAAKobWRpYQAAACBt
ZGhkAAAAAAAAAAAAAAAAAAB1MAAAdU5VxAAAAAAALWhkbHIAAAAAAAAAAHZpZGUAAAAAAAAAAAAAAABW
aWRlb0hhbmRsZXIAAAACU21pbmYAAAAUdm1oZAAAAAEAAAAAAAAAAAAAACRkaW5mAAAAHGRyZWYAAAAA
AAAAAQAAAAx1cmwgAAAAAQAAAhNzdGJsAAAAr3N0c2QAAAAAAAAAAQAAAJ9hdmMxAAAAAAAAAAEAAAAA
AAAAAAAAAAAAAAAAALAAkABIAAAASAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAGP//AAAALWF2Y0MBQsAN/+EAFWdCwA3ZAsTsBEAAAPpAADqYA8UKkgEABWjLg8sgAAAAHHV1aWRr
aEDyXyRPxbo5pRvPAyPzAAAAAAAAABhzdHRzAAAAAAAAAAEAAAAeAAAD6QAAABRzdHNzAAAAAAAAAAEA
AAABAAAAHHN0c2MAAAAAAAAAAQAAAAEAAAABAAAAAQAAAIxzdHN6AAAAAAAAAAAAAAAeAAADDwAAAAsA
AAALAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoA
AAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAAiHN0Y28A
AAAAAAAAHgAAAEYAAANnAAADewAAA5gAAAO0AAADxwAAA+MAAAP2AAAEEgAABCUAAARBAAAEXQAABHAA
AASMAAAEnwAABLsAAATOAAAE6gAABQYAAAUZAAAFNQAABUgAAAVkAAAFdwAABZMAAAWmAAAFwgAABd4A
AAXxAAAGDQAABGh0cmFrAAAAXHRraGQAAAADAAAAAAAAAAAAAAACAAAAAAAABDcAAAAAAAAAAAAAAAEB
AAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAkZWR0cwAAABxl
bHN0AAAAAAAAAAEAAAQkAAADcAABAAAAAAPgbWRpYQAAACBtZGhkAAAAAAAAAAAAAAAAAAC7gAAAykBV
xAAAAAAALWhkbHIAAAAAAAAAAHNvdW4AAAAAAAAAAAAAAABTb3VuZEhhbmRsZXIAAAADi21pbmYAAAAQ
c21oZAAAAAAAAAAAAAAAJGRpbmYAAAAcZHJlZgAAAAAAAAABAAAADHVybCAAAAABAAADT3N0YmwAAABn
c3RzZAAAAAAAAAABAAAAV21wNGEAAAAAAAAAAQAAAAAAAAAAAAIAEAAAAAC7gAAAAAAAM2VzZHMAAAAA
A4CAgCIAAgAEgICAFEAVBbjYAAu4AAAADcoFgICAAhGQBoCAgAECAAAAIHN0dHMAAAAAAAAAAgAAADIA
AAQAAAAAAQAAAkAAAAFUc3RzYwAAAAAAAAAbAAAAAQAAAAEAAAABAAAAAgAAAAIAAAABAAAAAwAAAAEA
AAABAAAABAAAAAIAAAABAAAABgAAAAEAAAABAAAABwAAAAIAAAABAAAACAAAAAEAAAABAAAACQAAAAIA
AAABAAAACgAAAAEAAAABAAAACwAAAAIAAAABAAAADQAAAAEAAAABAAAADgAAAAIAAAABAAAADwAAAAEA
AAABAAAAEAAAAAIAAAABAAAAEQAAAAEAAAABAAAAEgAAAAIAAAABAAAAFAAAAAEAAAABAAAAFQAAAAIA
AAABAAAAFgAAAAEAAAABAAAAFwAAAAIAAAABAAAAGAAAAAEAAAABAAAAGQAAAAIAAAABAAAAGgAAAAEA
AAABAAAAGwAAAAIAAAABAAAAHQAAAAEAAAABAAAAHgAAAAIAAAABAAAAHwAAAAQAAAABAAAA4HN0c3oA
AAAAAAAAAAAAADMAAAAaAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkA
AAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkA
AAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkA
AAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAACMc3RjbwAAAAAAAAAfAAAALAAAA1UA
AANyAAADhgAAA6IAAAO+AAAD0QAAA+0AAAQAAAAEHAAABC8AAARLAAAEZwAABHoAAASWAAAEqQAABMUA
AATYAAAE9AAABRAAAAUjAAAFPwAABVIAAAVuAAAFgQAABZ0AAAWwAAAFzAAABegAAAX7AAAGFwAAAGJ1
ZHRhAAAAWm1ldGEAAAAAAAAAIWhkbHIAAAAAAAAAAG1kaXJhcHBsAAAAAAAAAAAAAAAALWlsc3QAAAAl
qXRvbwAAAB1kYXRhAAAAAQAAAABMYXZmNTUuMzMuMTAw


hd-main.js application/javascript
(function() {
	'use strict';
	const l = {};
	const noopfn = function() {
	};
	const props = [
		"$j","Ad","Bd","Cd","Dd","Ed","Fd","Gd","Hd","Id","Jd","Nj","Oc","Pc","Pe",
		"Qc","Qe","Rc","Re","Ri","Sc","Tc","Uc","Vc","Wc","Wg","Xc","Xg","Yc","Yd",
		"ad","ae","bd","bf","cd","dd","ed","ef","ek","fd","fg","fh","fk","gd","hd",
		"ig","ij","jd","kd","ke","ld","md","mi","nd","od","oh","pd","pf","qd","rd",
		"sd","td","ud","vd","wd","wg","xd","xh","yd","zd",
		"$d","$e","$k","Ae","Af","Aj","Be","Ce","De","Ee","Ek","Eo","Ep","Fe","Fo",
		"Ge","Gh","Hk","Ie","Ip","Je","Ke","Kk","Kq","Le","Lh","Lk","Me","Mm","Ne",
		"Oe","Pe","Qe","Re","Rp","Se","Te","Ue","Ve","Vp","We","Xd","Xe","Yd","Ye",
		"Zd","Ze","Zf","Zk","ae","af","al","be","bf","bg","ce","cp","df","di","ee",
		"ef","fe","ff","gf","gm","he","hf","ie","je","jf","ke","kf","kl","le","lf",
		"lk","mf","mg","mn","nf","oe","of","pe","pf","pg","qe","qf","re","rf","se",
		"sf","te","tf","ti","ue","uf","ve","vf","we","wf","wg","wi","xe","ye","yf",
		"yk","yl","ze","zf","zk"
	];
	for ( let i = 0; i < props.length; i++ ) {
		l[props[i]] = noopfn;
	}
	window.L = window.J = l;
})();


# fuckadblock defuser
nofab.js application/javascript
alias fuckadblock.js-3.2.0
(function() {
	'use strict';
	const noopfn = function() {
	};
	const Fab = function() {};
	Fab.prototype.check = noopfn;
	Fab.prototype.clearEvent = noopfn;
	Fab.prototype.emitEvent = noopfn;
	Fab.prototype.on = function(a, b) {
		if ( !a ) { b(); }
		return this;
	};
	Fab.prototype.onDetected = function() {
		return this;
	};
	Fab.prototype.onNotDetected = function(a) {
		a();
		return this;
	};
	Fab.prototype.setOption = noopfn;
	Fab.prototype.options = {
		set: noopfn,
		get: noopfn,
	};
	const fab = new Fab();
	const getSetFab = {
		get: function() { return Fab; },
		set: function() {}
	};
	const getsetfab = {
		get: function() { return fab; },
		set: function() {}
	};
	if ( window.hasOwnProperty('FuckAdBlock') ) { window.FuckAdBlock = Fab; }
	else { Object.defineProperty(window, 'FuckAdBlock', getSetFab); }
	if ( window.hasOwnProperty('BlockAdBlock') ) { window.BlockAdBlock = Fab; }
	else { Object.defineProperty(window, 'BlockAdBlock', getSetFab); }
	if ( window.hasOwnProperty('SniffAdBlock') ) { window.SniffAdBlock = Fab; }
	else { Object.defineProperty(window, 'SniffAdBlock', getSetFab); }
	if ( window.hasOwnProperty('fuckAdBlock') ) { window.fuckAdBlock = fab; }
	else { Object.defineProperty(window, 'fuckAdBlock', getsetfab); }
	if ( window.hasOwnProperty('blockAdBlock') ) { window.blockAdBlock = fab; }
	else { Object.defineProperty(window, 'blockAdBlock', getsetfab); }
	if ( window.hasOwnProperty('sniffAdBlock') ) { window.sniffAdBlock = fab; }
	else { Object.defineProperty(window, 'sniffAdBlock', getsetfab); }
})();


# To neutralize GA scripts. The goal is to provide the minimal API
# expected by clients of these scripts so that the end users are able
# to wholly block GA while minimizing risks of page breakage.
# Test cases (need way more):
# - https://github.com/chrisaljoudi/uBlock/issues/119
# Reference API:
# - https://developers.google.com/analytics/devguides/collection/gajs/
google-analytics_ga.js application/javascript
alias google-analytics.com/ga.js
(function() {
	'use strict';
	const noopfn = function() {
	};
	//
	const Gaq = function() {
	};
	Gaq.prototype.Na = noopfn;
	Gaq.prototype.O = noopfn;
	Gaq.prototype.Sa = noopfn;
	Gaq.prototype.Ta = noopfn;
	Gaq.prototype.Va = noopfn;
	Gaq.prototype._createAsyncTracker = noopfn;
	Gaq.prototype._getAsyncTracker = noopfn;
	Gaq.prototype._getPlugin = noopfn;
	Gaq.prototype.push = function(a) {
		if ( typeof a === 'function' ) {
			a(); return;
		}
		if ( Array.isArray(a) === false ) { return; }
		// https://developers.google.com/analytics/devguides/collection/gajs/methods/gaJSApiDomainDirectory#_gat.GA_Tracker_._link
		// https://github.com/uBlockOrigin/uBlock-issues/issues/1807
		if (
			typeof a[0] === 'string' &&
			/(^|\.)_link$/.test(a[0]) &&
			typeof a[1] === 'string'
		) {
			try {
				window.location.assign(a[1]);
			} catch(ex) {
			}
		}
		// https://github.com/gorhill/uBlock/issues/2162
		if ( a[0] === '_set' && a[1] === 'hitCallback' && typeof a[2] === 'function' ) {
			a[2]();
		}
	};
	//
	const tracker = (function() {
		const out = {};
		const api = [
			'_addIgnoredOrganic _addIgnoredRef _addItem _addOrganic',
			'_addTrans _clearIgnoredOrganic _clearIgnoredRef _clearOrganic',
			'_cookiePathCopy _deleteCustomVar _getName _setAccount',
			'_getAccount _getClientInfo _getDetectFlash _getDetectTitle',
			'_getLinkerUrl _getLocalGifPath _getServiceMode _getVersion',
			'_getVisitorCustomVar _initData _linkByPost',
			'_setAllowAnchor _setAllowHash _setAllowLinker _setCampContentKey',
			'_setCampMediumKey _setCampNameKey _setCampNOKey _setCampSourceKey',
			'_setCampTermKey _setCampaignCookieTimeout _setCampaignTrack _setClientInfo',
			'_setCookiePath _setCookiePersistence _setCookieTimeout _setCustomVar',
			'_setDetectFlash _setDetectTitle _setDomainName _setLocalGifPath',
			'_setLocalRemoteServerMode _setLocalServerMode _setReferrerOverride _setRemoteServerMode',
			'_setSampleRate _setSessionTimeout _setSiteSpeedSampleRate _setSessionCookieTimeout',
			'_setVar _setVisitorCookieTimeout _trackEvent _trackPageLoadTime',
			'_trackPageview _trackSocial _trackTiming _trackTrans',
			'_visitCode'
		].join(' ').split(/\s+/);
		for ( const method of api ) {
			out[method] = noopfn;
		}
		out._getLinkerUrl = function(a) {
			return a;
		};
		// https://github.com/AdguardTeam/Scriptlets/issues/154
		out._link = function(a) {
			if ( typeof a !== 'string' ) { return; }
			try {
				window.location.assign(a);
			} catch(ex) {
			}
		};
		return out;
	})();
	//
	const Gat = function() {
	};
	Gat.prototype._anonymizeIP = noopfn;
	Gat.prototype._createTracker = noopfn;
	Gat.prototype._forceSSL = noopfn;
	Gat.prototype._getPlugin = noopfn;
	Gat.prototype._getTracker = function() {
		return tracker;
	};
	Gat.prototype._getTrackerByName = function() {
		return tracker;
	};
	Gat.prototype._getTrackers = noopfn;
	Gat.prototype.aa = noopfn;
	Gat.prototype.ab = noopfn;
	Gat.prototype.hb = noopfn;
	Gat.prototype.la = noopfn;
	Gat.prototype.oa = noopfn;
	Gat.prototype.pa = noopfn;
	Gat.prototype.u = noopfn;
	const gat = new Gat();
	window._gat = gat;
	//
	const gaq = new Gaq();
	(function() {
		const aa = window._gaq || [];
		if ( Array.isArray(aa) ) {
			while ( aa[0] ) {
				gaq.push(aa.shift());
			}
		}
	})();
	window._gaq = gaq.qf = gaq;
})();

google-analytics_analytics.js application/javascript
alias google-analytics.com/analytics.js
alias googletagmanager_gtm.js
alias googletagmanager.com/gtm.js
(function() {
	'use strict';
	// https://developers.google.com/analytics/devguides/collection/analyticsjs/
	const noopfn = function() {
	};
	//
	const Tracker = function() {
	};
	const p = Tracker.prototype;
	p.get = noopfn;
	p.set = noopfn;
	p.send = noopfn;
	//
	const w = window;
	const gaName = w.GoogleAnalyticsObject || 'ga';
	const gaQueue = w[gaName];
	// https://github.com/uBlockOrigin/uAssets/pull/4115
	const ga = function() {
		const len = arguments.length;
		if ( len === 0 ) { return; }
		const args = Array.from(arguments);
		let fn;
		let a = args[len-1];
		if ( a instanceof Object && a.hitCallback instanceof Function ) {
			fn = a.hitCallback;
		} else if ( a instanceof Function ) {
			fn = ( ) => { a(ga.create()); };
		} else {
			const pos = args.indexOf('hitCallback');
			if ( pos !== -1 && args[pos+1] instanceof Function ) {
				fn = args[pos+1];
			}
		}
		if ( fn instanceof Function === false ) { return; }
		try {
			fn();
		} catch (ex) {
		}
	};
	ga.create = function() {
		return new Tracker();
	};
	ga.getByName = function() {
		return new Tracker();
	};
	ga.getAll = function() {
		return [new Tracker()];
	};
	ga.remove = noopfn;
	// https://github.com/uBlockOrigin/uAssets/issues/2107
	ga.loaded = true;
	w[gaName] = ga;
	// https://github.com/gorhill/uBlock/issues/3075
	const dl = w.dataLayer;
	if ( dl instanceof Object ) {
		if ( dl.hide instanceof Object && typeof dl.hide.end === 'function' ) {
			dl.hide.end();
			dl.hide.end = ()=>{};
		}
		if ( typeof dl.push === 'function' ) {
			const doCallback = function(item) {
				if ( item instanceof Object === false ) { return; }
				if ( typeof item.eventCallback !== 'function' ) { return; }
				setTimeout(item.eventCallback, 1);
				item.eventCallback = ()=>{};
			};
			dl.push = new Proxy(dl.push, {
				apply: function(target, thisArg, args) {
					doCallback(args[0]);
					return Reflect.apply(target, thisArg, args);
				}
			});
			if ( Array.isArray(dl) ) {
				const q = dl.slice();
				for ( const item of q ) {
					doCallback(item);
				}
			}
		}
	}
	// empty ga queue
	if ( gaQueue instanceof Function && Array.isArray(gaQueue.q) ) {
		const q = gaQueue.q.slice();
		gaQueue.q.length = 0;
		for ( const entry of q ) {
			ga(...entry);
		}
	}
})();

google-analytics_inpage_linkid.js application/javascript
alias google-analytics.com/inpage_linkid.js
(function() {
	'use strict';
	window._gaq = window._gaq || {
		push: function() {
			;
		}
	};
})();

# https://github.com/gorhill/uBlock/issues/2480
# https://developers.google.com/analytics/devguides/collection/gajs/experiments#cxjs
google-analytics_cx_api.js application/javascript
alias google-analytics.com/cx/api.js
(function() {
	'use strict';
	const noopfn = function() {
	};
	window.cxApi = {
		chooseVariation: function() {
			return 0;
		},
		getChosenVariation: noopfn,
		setAllowHash: noopfn,
		setChosenVariation: noopfn,
		setCookiePath: noopfn,
		setDomainName: noopfn
		};
})();


# Source below is based on Mozilla source code:
# https://searchfox.org/mozilla-central/rev/d317e93d9a59c9e4c06ada85fbff9f6a1ceaaad1/browser/extensions/webcompat/shims/google-ima.js
# Modifications to the original code below this comment:
# - Avoid JS syntax not supported by older browser versions
# - Add missing shim event
# - Modified to avoid jshint warnings as per uBO's config
# - Added `OmidVerificationVendor` to `ima`
# - Have `AdError.getInnerError()` return `null`
# - Have `AdDisplayContainer` constructor add DIV element to container
# - Added missing event dispatcher functionality
# - Corrected return type of `Ad.getUniversalAdIds()`
# - Corrected typo in `UniversalAdIdInfo.getAdIdValue()` method name
# - Corrected dispatch of LOAD event when preloading is enabled
# - Corrected dispatch of CONTENT_PAUSE/RESUME_REQUESTED events
# Related issue:
# - https://github.com/uBlockOrigin/uBlock-issues/issues/2158
google-ima.js application/javascript
alias google-ima3
(function() {
	'use strict';
	if (!window.google || !window.google.ima || !window.google.ima.VERSION) {
		const VERSION = "3.517.2";
		const CheckCanAutoplay = (function() {
			// Sourced from: https://searchfox.org/mozilla-central/source/dom/media/gtest/negative_duration.mp4
			const TEST_VIDEO = new Blob(
				[
					new Uint32Array([
						469762048,
						1887007846,
						1752392036,
						0,
						913273705,
						1717987696,
						828601953,
						-1878917120,
						1987014509,
						1811939328,
						1684567661,
						0,
						0,
						0,
						-402456576,
						0,
						256,
						1,
						0,
						0,
						256,
						0,
						0,
						0,
						256,
						0,
						0,
						0,
						64,
						0,
						0,
						0,
						0,
						0,
						0,
						33554432,
						-201261056,
						1801548404,
						1744830464,
						1684564852,
						251658241,
						0,
						0,
						0,
						0,
						16777216,
						0,
						-1,
						-1,
						0,
						0,
						0,
						0,
						256,
						0,
						0,
						0,
						256,
						0,
						0,
						0,
						64,
						5,
						53250,
						-2080309248,
						1634296941,
						738197504,
						1684563053,
						1,
						0,
						0,
						0,
						0,
						-2137614336,
						-1,
						-1,
						50261,
						754974720,
						1919706216,
						0,
						0,
						1701079414,
						0,
						0,
						0,
						1701079382,
						1851869295,
						1919249508,
						16777216,
						1852402979,
						102,
						1752004116,
						100,
						1,
						0,
						0,
						1852400676,
						102,
						1701995548,
						102,
						0,
						1,
						1819440396,
						32,
						1,
						1651799011,
						108,
						1937011607,
						100,
						0,
						1,
						1668702599,
						49,
						0,
						1,
						0,
						0,
						0,
						33555712,
						4718800,
						4718592,
						0,
						65536,
						0,
						0,
						0,
						0,
						0,
						0,
						0,
						0,
						16776984,
						1630601216,
						21193590,
						-14745500,
						1729626337,
						-1407254428,
						89161945,
						1049019,
						9453056,
						-251611125,
						27269507,
						-379058688,
						-1329024392,
						268435456,
						1937011827,
						0,
						0,
						268435456,
						1668510835,
						0,
						0,
						335544320,
						2054386803,
						0,
						0,
						0,
						268435456,
						1868788851,
						0,
						0,
						671088640,
						2019915373,
						536870912,
						2019914356,
						0,
						16777216,
						16777216,
						0,
						0,
						0,
					]),
				],
				{ type: "video/mp4" }
			);
			let testVideo;
			return function() {
				if (!testVideo) {
					testVideo = document.createElement("video");
					testVideo.style =
						"position:absolute; width:0; height:0; left:0; right:0; z-index:-1; border:0";
					testVideo.setAttribute("muted", "muted");
					testVideo.setAttribute("playsinline", "playsinline");
					testVideo.src = URL.createObjectURL(TEST_VIDEO);
					document.body.appendChild(testVideo);
				}
				return testVideo.play();
			};
		})();
		const ima = {};
		class AdDisplayContainer {
			constructor(containerElement) {
				const divElement = document.createElement("div");
				divElement.style.setProperty("display", "none", "important");
				divElement.style.setProperty("visibility", "collapse", "important");
				containerElement.appendChild(divElement);
			}
			destroy() {}
			initialize() {}
		}
		class ImaSdkSettings {
			constructor() {
				this.c = true;
				this.f = {};
				this.i = false;
				this.l = "";
				this.p = "";
				this.r = 0;
				this.t = "";
				this.v = "";
			}
			getCompanionBackfill() {}
			getDisableCustomPlaybackForIOS10Plus() {
				return this.i;
			}
			getFeatureFlags() {
				return this.f;
			}
			getLocale() {
				return this.l;
			}
			getNumRedirects() {
				return this.r;
			}
			getPlayerType() {
				return this.t;
			}
			getPlayerVersion() {
				return this.v;
			}
			getPpid() {
				return this.p;
			}
			isCookiesEnabled() {
				return this.c;
			}
			setAutoPlayAdBreaks() {}
			setCompanionBackfill() {}
			setCookiesEnabled(c) {
				this.c = !!c;
			}
			setDisableCustomPlaybackForIOS10Plus(i) {
				this.i = !!i;
			}
			setFeatureFlags(f) {
				this.f = f;
			}
			setLocale(l) {
				this.l = l;
			}
			setNumRedirects(r) {
				this.r = r;
			}
			setPlayerType(t) {
				this.t = t;
			}
			setPlayerVersion(v) {
				this.v = v;
			}
			setPpid(p) {
				this.p = p;
			}
			setSessionId(/*s*/) {}
			setVpaidAllowed(/*a*/) {}
			setVpaidMode(/*m*/) {}
			// https://github.com/uBlockOrigin/uBlock-issues/issues/2265#issuecomment-1637094149
			getDisableFlashAds() {
			}
			setDisableFlashAds() {
			}
		}
		ImaSdkSettings.CompanionBackfillMode = {
			ALWAYS: "always",
			ON_MASTER_AD: "on_master_ad",
		};
		ImaSdkSettings.VpaidMode = {
			DISABLED: 0,
			ENABLED: 1,
			INSECURE: 2,
		};
		class EventHandler {
			constructor() {
				this.listeners = new Map();
			}
			_dispatch(e) {
				let listeners = this.listeners.get(e.type);
				listeners = listeners ? Array.from(listeners.values()) : [];
				for (const listener of listeners) {
					try {
						listener(e);
					} catch (r) {
						console.error(r);
					}
				}
			}
			addEventListener(types, c, options, context) {
				if (!Array.isArray(types)) {
					types = [types];
				}
				for (const t of types) {
					if (!this.listeners.has(t)) {
						this.listeners.set(t, new Map());
					}
					this.listeners.get(t).set(c, c.bind(context || this));
				}
			}
			removeEventListener(types, c) {
				if (!Array.isArray(types)) {
					types = [types];
				}
				for (const t of types) {
					const typeSet = this.listeners.get(t);
					if (typeSet) {
						typeSet.delete(c);
					}
				}
			}
		}
		class AdsLoader extends EventHandler {
			constructor() {
				super();
				this.settings = new ImaSdkSettings();
			}
			contentComplete() {}
			destroy() {}
			getSettings() {
				return this.settings;
			}
			getVersion() {
				return VERSION;
			}
			requestAds(/*r, c*/) {
				// If autoplay is disabled and the page is trying to autoplay a tracking
				// ad, then IMA fails with an error, and the page is expected to request
				// ads again later when the user clicks to play.
				CheckCanAutoplay().then(
					() => {
						const { ADS_MANAGER_LOADED } = AdsManagerLoadedEvent.Type;
						this._dispatch(new ima.AdsManagerLoadedEvent(ADS_MANAGER_LOADED));
					},
					() => {
						const e = new ima.AdError(
							"adPlayError",
							1205,
							1205,
							"The browser prevented playback initiated without user interaction."
						);
						this._dispatch(new ima.AdErrorEvent(e));
					}
				);
			}
		}
		class AdsManager extends EventHandler {
			constructor() {
				super();
				this.volume = 1;
				this._enablePreloading = false;
			}
			collapse() {}
			configureAdsManager() {}
			destroy() {}
			discardAdBreak() {}
			expand() {}
			focus() {}
			getAdSkippableState() {
				return false;
			}
			getCuePoints() {
				return [0];
			}
			getCurrentAd() {
				return currentAd;
			}
			getCurrentAdCuePoints() {
				return [];
			}
			getRemainingTime() {
				return 0;
			}
			getVolume() {
				return this.volume;
			}
			init(/*w, h, m, e*/) {
				if (this._enablePreloading) {
					this._dispatch(new ima.AdEvent(AdEvent.Type.LOADED));
				}
			}
			isCustomClickTrackingUsed() {
				return false;
			}
			isCustomPlaybackUsed() {
				return false;
			}
			pause() {}
			requestNextAdBreak() {}
			resize(/*w, h, m*/) {}
			resume() {}
			setVolume(v) {
				this.volume = v;
			}
			skip() {}
			start() {
				requestAnimationFrame(() => {
					for (const type of [
						AdEvent.Type.LOADED,
						AdEvent.Type.STARTED,
						AdEvent.Type.CONTENT_PAUSE_REQUESTED,
						AdEvent.Type.AD_BUFFERING,
						AdEvent.Type.FIRST_QUARTILE,
						AdEvent.Type.MIDPOINT,
						AdEvent.Type.THIRD_QUARTILE,
						AdEvent.Type.COMPLETE,
						AdEvent.Type.ALL_ADS_COMPLETED,
						AdEvent.Type.CONTENT_RESUME_REQUESTED,
					]) {
						try {
							this._dispatch(new ima.AdEvent(type));
						} catch (e) {
							console.error(e);
						}
					}
				});
			}
			stop() {}
			updateAdsRenderingSettings(/*s*/) {}
		}
		class AdsRenderingSettings {}
		class AdsRequest {
			setAdWillAutoPlay() {}
			setAdWillPlayMuted() {}
			setContinuousPlayback() {}
		}
		class AdPodInfo {
			getAdPosition() {
				return 1;
			}
			getIsBumper() {
				return false;
			}
			getMaxDuration() {
				return -1;
			}
			getPodIndex() {
				return 1;
			}
			getTimeOffset() {
				return 0;
			}
			getTotalAds() {
				return 1;
			}
		}
		class Ad {
			constructor() {
				this._pi = new AdPodInfo();
			}
			getAdId() {
				return "";
			}
			getAdPodInfo() {
				return this._pi;
			}
			getAdSystem() {
				return "";
			}
			getAdvertiserName() {
				return "";
			}
			getApiFramework() {
				return null;
			}
			getCompanionAds() {
				return [];
			}
			getContentType() {
				return "";
			}
			getCreativeAdId() {
				return "";
			}
			getCreativeId() {
				return "";
			}
			getDealId() {
				return "";
			}
			getDescription() {
				return "";
			}
			getDuration() {
				return 8.5;
			}
			getHeight() {
				return 0;
			}
			getMediaUrl() {
				return null;
			}
			getMinSuggestedDuration() {
				return -2;
			}
			getSkipTimeOffset() {
				return -1;
			}
			getSurveyUrl() {
				return null;
			}
			getTitle() {
				return "";
			}
			getTraffickingParameters() {
				return {};
			}
			getTraffickingParametersString() {
				return "";
			}
			getUiElements() {
				return [""];
			}
			getUniversalAdIdRegistry() {
				return "unknown";
			}
			getUniversalAdIds() {
				return [new UniversalAdIdInfo()];
			}
			getUniversalAdIdValue() {
				return "unknown";
			}
			getVastMediaBitrate() {
				return 0;
			}
			getVastMediaHeight() {
				return 0;
			}
			getVastMediaWidth() {
				return 0;
			}
			getWidth() {
				return 0;
			}
			getWrapperAdIds() {
				return [""];
			}
			getWrapperAdSystems() {
				return [""];
			}
			getWrapperCreativeIds() {
				return [""];
			}
			isLinear() {
				return true;
			}
			isSkippable() {
				return true;
			}
		}
		class CompanionAd {
			getAdSlotId() {
				return "";
			}
			getContent() {
				return "";
			}
			getContentType() {
				return "";
			}
			getHeight() {
				return 1;
			}
			getWidth() {
				return 1;
			}
		}
		class AdError {
			constructor(type, code, vast, message) {
				this.errorCode = code;
				this.message = message;
				this.type = type;
				this.vastErrorCode = vast;
			}
			getErrorCode() {
				return this.errorCode;
			}
			getInnerError() {
					return null;
			}
			getMessage() {
				return this.message;
			}
			getType() {
				return this.type;
			}
			getVastErrorCode() {
				return this.vastErrorCode;
			}
			toString() {
				return `AdError ${this.errorCode}: ${this.message}`;
			}
		}
		AdError.ErrorCode = {};
		AdError.Type = {};
		const isEngadget = () => {
			try {
				for (const ctx of Object.values(window.vidible._getContexts())) {
					const player = ctx.getPlayer();
					if (!player) { continue;}
					const div = player.div;
					if (!div) { continue; }
					if (div.innerHTML.includes("www.engadget.com")) {
						return true;
					}
				}
			} catch (_) {}
			return false;
		};
		const currentAd = isEngadget() ? undefined : new Ad();
		class AdEvent {
			constructor(type) {
				this.type = type;
			}
			getAd() {
				return currentAd;
			}
			getAdData() {
				return {};
			}
		}
		AdEvent.Type = {
			AD_BREAK_READY: "adBreakReady",
			AD_BUFFERING: "adBuffering",
			AD_CAN_PLAY: "adCanPlay",
			AD_METADATA: "adMetadata",
			AD_PROGRESS: "adProgress",
			ALL_ADS_COMPLETED: "allAdsCompleted",
			CLICK: "click",
			COMPLETE: "complete",
			CONTENT_PAUSE_REQUESTED: "contentPauseRequested",
			CONTENT_RESUME_REQUESTED: "contentResumeRequested",
			DURATION_CHANGE: "durationChange",
			EXPANDED_CHANGED: "expandedChanged",
			FIRST_QUARTILE: "firstQuartile",
			IMPRESSION: "impression",
			INTERACTION: "interaction",
			LINEAR_CHANGE: "linearChange",
			LINEAR_CHANGED: "linearChanged",
			LOADED: "loaded",
			LOG: "log",
			MIDPOINT: "midpoint",
			PAUSED: "pause",
			RESUMED: "resume",
			SKIPPABLE_STATE_CHANGED: "skippableStateChanged",
			SKIPPED: "skip",
			STARTED: "start",
			THIRD_QUARTILE: "thirdQuartile",
			USER_CLOSE: "userClose",
			VIDEO_CLICKED: "videoClicked",
			VIDEO_ICON_CLICKED: "videoIconClicked",
			VIEWABLE_IMPRESSION: "viewable_impression",
			VOLUME_CHANGED: "volumeChange",
			VOLUME_MUTED: "mute",
		};
		class AdErrorEvent {
			constructor(error) {
				this.type = "adError";
				this.error = error;
			}
			getError() {
				return this.error;
			}
			getUserRequestContext() {
				return {};
			}
		}
		AdErrorEvent.Type = {
			AD_ERROR: "adError",
		};
		const manager = new AdsManager();
		class AdsManagerLoadedEvent {
			constructor(type) {
				this.type = type;
			}
			getAdsManager(c, settings) {
				if (settings && settings.enablePreloading) {
					manager._enablePreloading = true;
				}
				return manager;
			}
			getUserRequestContext() {
				return {};
			}
		}
		AdsManagerLoadedEvent.Type = {
			ADS_MANAGER_LOADED: "adsManagerLoaded",
		};
		class CustomContentLoadedEvent {}
		CustomContentLoadedEvent.Type = {
			CUSTOM_CONTENT_LOADED: "deprecated-event",
		};
		class CompanionAdSelectionSettings {}
		CompanionAdSelectionSettings.CreativeType = {
			ALL: "All",
			FLASH: "Flash",
			IMAGE: "Image",
		};
		CompanionAdSelectionSettings.ResourceType = {
			ALL: "All",
			HTML: "Html",
			IFRAME: "IFrame",
			STATIC: "Static",
		};
		CompanionAdSelectionSettings.SizeCriteria = {
			IGNORE: "IgnoreSize",
			SELECT_EXACT_MATCH: "SelectExactMatch",
			SELECT_NEAR_MATCH: "SelectNearMatch",
		};
		class AdCuePoints {
			getCuePoints() {
				return [];
			}
		}
		class AdProgressData {}
		class UniversalAdIdInfo {
			getAdIdRegistry() {
				return "";
			}
			getAdIdValue() {
				return "";
			}
		}
		Object.assign(ima, {
			AdCuePoints,
			AdDisplayContainer,
			AdError,
			AdErrorEvent,
			AdEvent,
			AdPodInfo,
			AdProgressData,
			AdsLoader,
			AdsManager: manager,
			AdsManagerLoadedEvent,
			AdsRenderingSettings,
			AdsRequest,
			CompanionAd,
			CompanionAdSelectionSettings,
			CustomContentLoadedEvent,
			gptProxyInstance: {},
			ImaSdkSettings,
			OmidAccessMode: {
				DOMAIN: "domain",
				FULL: "full",
				LIMITED: "limited",
			},
			OmidVerificationVendor: {
				1: "OTHER",
				2: "GOOGLE",
				GOOGLE: 2,
				OTHER: 1
			},
			settings: new ImaSdkSettings(),
			UiElements: {
				AD_ATTRIBUTION: "adAttribution",
				COUNTDOWN: "countdown",
			},
			UniversalAdIdInfo,
			VERSION,
			ViewMode: {
				FULLSCREEN: "fullscreen",
				NORMAL: "normal",
			},
		});
		if (!window.google) {
			window.google = {};
		}
		window.google.ima = ima;
}
})();


# Ubiquitous googletagservices.com: not blocked by EasyPrivacy.
# "Tags are tiny bits of website code that let you measure traffic and
# "visitor behavior"
googletagservices_gpt.js application/javascript
alias googletagservices.com/gpt.js
alias googletagservices-gpt.js
(function() {
	'use strict';
	// https://developers.google.com/doubleclick-gpt/reference
	const noopfn = function() {
	}.bind();
	const noopthisfn = function() {
		return this;
	};
	const noopnullfn = function() {
		return null;
	};
	const nooparrayfn = function() {
		return [];
	};
	const noopstrfn = function() {
		return '';
	};
	//
	const companionAdsService = {
		addEventListener: noopthisfn,
		enableSyncLoading: noopfn,
		setRefreshUnfilledSlots: noopfn
	};
	const contentService = {
		addEventListener: noopthisfn,
		setContent: noopfn
	};
	const PassbackSlot = function() {
	};
	let p = PassbackSlot.prototype;
	p.display = noopfn;
	p.get = noopnullfn;
	p.set = noopthisfn;
	p.setClickUrl = noopthisfn;
	p.setTagForChildDirectedTreatment = noopthisfn;
	p.setTargeting = noopthisfn;
	p.updateTargetingFromMap = noopthisfn;
	const pubAdsService = {
		addEventListener: noopthisfn,
		clear: noopfn,
		clearCategoryExclusions: noopthisfn,
		clearTagForChildDirectedTreatment: noopthisfn,
		clearTargeting: noopthisfn,
		collapseEmptyDivs: noopfn,
		defineOutOfPagePassback: function() { return new PassbackSlot(); },
		definePassback: function() { return new PassbackSlot(); },
		disableInitialLoad: noopfn,
		display: noopfn,
		enableAsyncRendering: noopfn,
		enableLazyLoad: noopfn,
		enableSingleRequest: noopfn,
		enableSyncRendering: noopfn,
		enableVideoAds: noopfn,
		get: noopnullfn,
		getAttributeKeys: nooparrayfn,
		getTargeting: nooparrayfn,
		getTargetingKeys: nooparrayfn,
		getSlots: nooparrayfn,
		refresh: noopfn,
		removeEventListener: noopfn,
		set: noopthisfn,
		setCategoryExclusion: noopthisfn,
		setCentering: noopfn,
		setCookieOptions: noopthisfn,
		setForceSafeFrame: noopthisfn,
		setLocation: noopthisfn,
		setPublisherProvidedId: noopthisfn,
		setPrivacySettings: noopthisfn,
		setRequestNonPersonalizedAds: noopthisfn,
		setSafeFrameConfig: noopthisfn,
		setTagForChildDirectedTreatment: noopthisfn,
		setTargeting: noopthisfn,
		setVideoContent: noopthisfn,
		updateCorrelator: noopfn
	};
	const SizeMappingBuilder = function() {
	};
	p = SizeMappingBuilder.prototype;
	p.addSize = noopthisfn;
	p.build = noopnullfn;
	const Slot = function() {
	};
	p = Slot.prototype;
	p.addService = noopthisfn;
	p.clearCategoryExclusions = noopthisfn;
	p.clearTargeting = noopthisfn;
	p.defineSizeMapping = noopthisfn;
	p.get = noopnullfn;
	p.getAdUnitPath = nooparrayfn;
	p.getAttributeKeys = nooparrayfn;
	p.getCategoryExclusions = nooparrayfn;
	p.getDomId = noopstrfn;
	p.getResponseInformation = noopnullfn;
	p.getSlotElementId = noopstrfn;
	p.getSlotId = noopthisfn;
	p.getTargeting = nooparrayfn;
	p.getTargetingKeys = nooparrayfn;
	p.set = noopthisfn;
	p.setCategoryExclusion = noopthisfn;
	p.setClickUrl = noopthisfn;
	p.setCollapseEmptyDiv = noopthisfn;
	p.setTargeting = noopthisfn;
	p.updateTargetingFromMap = noopthisfn;
	//
	const gpt = window.googletag || {};
	const cmd = gpt.cmd || [];
	gpt.apiReady = true;
	gpt.cmd = [];
	gpt.cmd.push = function(a) {
		try {
			a();
		} catch (ex) {
		}
		return 1;
	};
	gpt.companionAds = function() { return companionAdsService; };
	gpt.content = function() { return contentService; };
	gpt.defineOutOfPageSlot = function() { return new Slot(); };
	gpt.defineSlot = function() { return new Slot(); };
	gpt.destroySlots = noopfn;
	gpt.disablePublisherConsole = noopfn;
	gpt.display = noopfn;
	gpt.enableServices = noopfn;
	gpt.getVersion = noopstrfn;
	gpt.pubads = function() { return pubAdsService; };
	gpt.pubadsReady = true;
	gpt.setAdIframeTitle = noopfn;
	gpt.sizeMapping = function() { return new SizeMappingBuilder(); };
	window.googletag = gpt;
	while ( cmd.length !== 0 ) {
		gpt.cmd.push(cmd.shift());
	}
})();


# https://github.com/uBlockOrigin/uAssets/issues/282
# https://github.com/uBlockOrigin/uAssets/issues/418
googlesyndication_adsbygoogle.js application/javascript
alias googlesyndication.com/adsbygoogle.js
alias googlesyndication-adsbygoogle.js
(function() {
	'use strict';
	const init = ( ) => {
		window.adsbygoogle = {
			loaded: true,
			push: function() {
			}
		};
		const phs = document.querySelectorAll('.adsbygoogle');
		const css = 'height:1px!important;max-height:1px!important;max-width:1px!important;width:1px!important;';
		for ( let i = 0; i < phs.length; i++ ) {
			const id = `aswift_${i}`;
			if ( document.querySelector(`iframe#${id}`) !== null ) { continue; }
			const fr = document.createElement('iframe');
			fr.id = id;
			fr.style = css;
			const cfr = document.createElement('iframe');
			cfr.id = `google_ads_frame${i}`;
			fr.appendChild(cfr);
			phs[i].appendChild(fr);
		}
	};
	if (
		document.querySelectorAll('.adsbygoogle').length === 0 &&
		document.readyState === 'loading'
	) {
		window.addEventListener('DOMContentLoaded', init, { once: true });
	} else {
		init();
	}
})();


# https://forums.lanik.us/viewtopic.php?f=91&t=27188
# https://forums.lanik.us/viewtopic.php?f=91&t=29609
ligatus_angular-tag.js application/javascript
alias ligatus.com/*/angular-tag.js
(function() {
	'use strict';
	self.adProtect = true;
	Object.defineProperties(window, {
		uabpdl: { value: true },
		uabDetect: { value: true }
	});
})();


nobab.js application/javascript
alias bab-defuser.js
alias prevent-bab.js
(function() {
	'use strict';
	const signatures = [
		[ 'blockadblock' ],
		[ 'babasbm' ],
		[ /getItem\('babn'\)/ ],
		[
			'getElementById',
			'String.fromCharCode',
			'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',
			'charAt',
			'DOMContentLoaded',
			'AdBlock',
			'addEventListener',
			'doScroll',
			'fromCharCode',
			'<<2|r>>4',
			'sessionStorage',
			'clientWidth',
			'localStorage',
			'Math',
			'random'
		],
	];
	const check = function(s) {
		for ( let i = 0; i < signatures.length; i++ ) {
			const tokens = signatures[i];
			let match = 0;
			for ( let j = 0; j < tokens.length; j++ ) {
				const token = tokens[j];
				const pos = token instanceof RegExp
					? s.search(token)
					: s.indexOf(token);
				if ( pos !== -1 ) { match += 1; }
			}
			if ( (match / tokens.length) >= 0.8 ) { return true; }
		}
		return false;
	};
	self.eval = new Proxy(self.eval, {			  // jshint ignore: line
		apply: function(target, thisArg, args) {
			const a = args[0];
			if ( typeof a !== 'string' || !check(a) ) {
				return target.apply(thisArg, args);
			}
			if ( document.body ) {
				document.body.style.removeProperty('visibility');
			}
			let el = document.getElementById('babasbmsgx');
			if ( el ) {
				el.parentNode.removeChild(el);
			}
		}
	});
	self.setTimeout = new Proxy(self.setTimeout, {
		apply: function(target, thisArg, args) {
			const a = args[0];
			if (
				typeof a !== 'string' ||
				/\.bab_elementid.$/.test(a) === false
			) {
				return target.apply(thisArg, args);
			}
		}
	});
})();


nobab2.js application/javascript
(function() {
	'use strict';
	const script = document.currentScript;
	if ( script === null ) { return; }
	const src = script.src;
	if ( typeof src !== 'string' ) { return; }
	// The scriplet is meant to act ONLY when it's being used as a redirection
	// for specific domains.
	const re = new RegExp(
		'^https?://[\\w-]+\\.(' +
		[
			'adclixx\\.net',
			'adnetasia\\.com',
			'adtrackers\\.net',
			'bannertrack\\.net',
		].join('|') +
		')/.'
	);
	if ( re.test(src) === false ) { return; }
	window.nH7eXzOsG = 858;
})();


scorecardresearch_beacon.js application/javascript
alias scorecardresearch.com/beacon.js
(function() {
	'use strict';
	window.COMSCORE = {
		purge: function() {
			_comscore = [];
		},
		beacon: function() {
			;
		}
	};
})();


# https://github.com/gorhill/uBlock/issues/1250#issuecomment-173533894
outbrain-widget.js application/javascript
alias widgets.outbrain.com/outbrain.js
(function() {
	'use strict';
	const noopfn = function() {
	};
	const obr = {};
	const methods = [
		'callClick',
		'callLoadMore',
		'callRecs',
		'callUserZapping',
		'callWhatIs',
		'cancelRecommendation',
		'cancelRecs',
		'closeCard',
		'closeModal',
		'closeTbx',
		'errorInjectionHandler',
		'getCountOfRecs',
		'getStat',
		'imageError',
		'manualVideoClicked',
		'onOdbReturn',
		'onVideoClick',
		'pagerLoad',
		'recClicked',
		'refreshSpecificWidget',
		'renderSpaWidgets',
		'refreshWidget',
		'reloadWidget',
		'researchWidget',
		'returnedError',
		'returnedHtmlData',
		'returnedIrdData',
		'returnedJsonData',
		'scrollLoad',
		'showDescription',
		'showRecInIframe',
		'userZappingMessage',
		'zappingFormAction'
	];
	obr.extern = {
		video: {
			getVideoRecs: noopfn,
			videoClicked: noopfn
		}
	};
	methods.forEach(function(a) {
		obr.extern[a] = noopfn;
	});
	window.OBR = window.OBR || obr;
})();


# https://github.com/gorhill/uBlock/issues/1228
window.name-defuser.js application/javascript
if ( window === window.top ) {
	window.name = '';
}


# https://github.com/gorhill/uBlock/issues/897#issuecomment-180871042
doubleclick_instream_ad_status.js application/javascript
alias doubleclick.net/instream/ad_status.js
window.google_ad_status = 1;


# Completely experimental: load Disqus on demand only. Purpose is to avoid
# connecting to Disqus' servers, unless the user explicitly asks for the
# comments to be loaded.
# Works with following filters:
# ||disqus.com/forums/*/embed.js$script,redirect=disqus.com/forums/*/embed.js
# ||disqus.com/embed.js$script,redirect=disqus.com/embed.js
# ||disqus.com/count.js$script
# @@||disqus.com/embed.js?_=1457540*$script
# If you want a site you regularly visit to always have the comment loaded,
# just use an exception static filter. Example for wired.com:
# @@||wired.disqus.com/embed.js

# Sometimes a site will use this one script:
disqus_forums_embed.js application/javascript
alias disqus.com/forums/*/embed.js
(function() {
	'use strict';
	let ee = document.getElementsByTagName('script');
	let i = ee.length, src;
	while ( i-- ) {
		src = ee[i].src || '';
		if ( src === '' ) {
			continue;
		}
		if ( src.lastIndexOf('disqus.com/embed.js') === (src.length - 19) ) {
			return;
		}
	}
	let e = document.createElement('script');
	e.async = true;
	e.src = '//' + window.disqus_shortname + '.disqus.com/embed.js';
	document.body.appendChild(e);
})();

# Most use this one though:
disqus_embed.js application/javascript
alias disqus.com/embed.js
(function() {
	'use strict';
	let p = document.getElementById(window.disqus_container_id || 'disqus_thread');
	if ( p === null ) {
		return;
	}
	let b = document.createElement('button');
	b.textContent = 'Disqus blocked by uBlock Origin: click to unblock';
	b.type = 'button';
	p.appendChild(b);
	let loadDisqus = function(ev) {
		b.removeEventListener('click', loadDisqus);
		p.removeChild(b);
		let script = document.createElement('script');
		script.async = true;
		let t = Date.now().toString();
		script.src = '//' + window.disqus_shortname + '.disqus.com/embed.js?_=1457540' + t.slice(-6);
		document.body.appendChild(script);
		ev.preventDefault();
		ev.stopPropagation();
	};
	b.addEventListener('click', loadDisqus);
})();


amazon_ads.js application/javascript
alias amazon-adsystem.com/aax2/amzn_ads.js
(function() {
	'use strict';
	if ( amznads ) {
		return;
	}
	const w = window;
	const noopfn = function() {
		;
	}.bind();
	let amznads = {
		appendScriptTag: noopfn,
		appendTargetingToAdServerUrl: noopfn,
		appendTargetingToQueryString: noopfn,
		clearTargetingFromGPTAsync: noopfn,
		doAllTasks: noopfn,
		doGetAdsAsync: noopfn,
		doTask: noopfn,
		detectIframeAndGetURL: noopfn,
		getAds: noopfn,
		getAdsAsync: noopfn,
		getAdForSlot: noopfn,
		getAdsCallback: noopfn,
		getDisplayAds: noopfn,
		getDisplayAdsAsync: noopfn,
		getDisplayAdsCallback: noopfn,
		getKeys: noopfn,
		getReferrerURL: noopfn,
		getScriptSource: noopfn,
		getTargeting: noopfn,
		getTokens: noopfn,
		getValidMilliseconds: noopfn,
		getVideoAds: noopfn,
		getVideoAdsAsync: noopfn,
		getVideoAdsCallback: noopfn,
		handleCallBack: noopfn,
		hasAds: noopfn,
		renderAd: noopfn,
		saveAds: noopfn,
		setTargeting: noopfn,
		setTargetingForGPTAsync: noopfn,
		setTargetingForGPTSync: noopfn,
		tryGetAdsAsync: noopfn,
		updateAds: noopfn
	};
	w.amznads = amznads;
	w.amzn_ads = w.amzn_ads || noopfn;
	w.aax_write = w.aax_write || noopfn;
	w.aax_render_ad = w.aax_render_ad || noopfn;
})();


# Experimental: Generic nuisance overlay buster.
# if this works well and proves to be useful, this may end up as a stock tool
# in uBO's popup panel.
overlay-buster.js application/javascript
(function() {
	if ( window !== window.top ) {
		return;
	}
	var tstart;
	var ttl = 30000;
	var delay = 0;
	var delayStep = 50;
	var buster = function(mutations) {
		var docEl = document.documentElement,
			bodyEl = document.body,
			vw = Math.min(docEl.clientWidth, window.innerWidth),
			vh = Math.min(docEl.clientHeight, window.innerHeight),
			tol = Math.min(vw, vh) * 0.05,
			el = document.elementFromPoint(vw/2, vh/2),
			style, rect;
		for (;;) {
			if ( el === null || el.parentNode === null || el === bodyEl ) {
				break;
			}
			style = window.getComputedStyle(el);
			if ( parseInt(style.zIndex, 10) >= 1000 || style.position === 'fixed' ) {
				rect = el.getBoundingClientRect();
				if ( rect.left <= tol && rect.top <= tol && (vw - rect.right) <= tol && (vh - rect.bottom) < tol ) {
					el.parentNode.removeChild(el);
					tstart = Date.now();
					el = document.elementFromPoint(vw/2, vh/2);
					bodyEl.style.setProperty('overflow', 'auto', 'important');
					docEl.style.setProperty('overflow', 'auto', 'important');
					continue;
				}
			}
			el = el.parentNode;
		}
		if ( (Date.now() - tstart) < ttl ) {
			delay = Math.min(delay + delayStep, 1000);
			setTimeout(buster, delay);
		}
	};
	var domReady = function(ev) {
		if ( ev ) {
			document.removeEventListener(ev.type, domReady);
		}
		tstart = Date.now();
		setTimeout(buster, delay);
	};
	if ( document.readyState === 'loading' ) {
		document.addEventListener('DOMContentLoaded', domReady);
	} else {
		domReady();
	}
})();


# https://github.com/uBlockOrigin/uAssets/issues/8
alert-buster.js application/javascript
(function() {
	window.alert = function(a) {
		console.info(a);
	};
})();


# Prevent web pages from using eval(), and report attempts in console.
noeval.js application/javascript
(function() {
	window.eval = function(s) {
		console.log('Document tried to eval... \n' + s);
	}.bind(window);
})();

noeval-silent.js application/javascript
alias silent-noeval.js
(function() {
	window.eval = function(s) {
		;
	}.bind(window);
})();

noeval-if.js application/javascript
alias prevent-eval-if.js
(function() {
	var needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	realNoEval = window.eval;
	window.eval = function(a) {
		if ( !needle.test(a.toString()) ) {
			realNoEval.call(window, a);
		}
	}.bind(window);
})();


# Prevent web pages from using RTCPeerConnection(), and report attempts in console.
nowebrtc.js application/javascript
(function() {
	var rtcName = window.RTCPeerConnection ? 'RTCPeerConnection' : (
		window.webkitRTCPeerConnection ? 'webkitRTCPeerConnection' : ''
	);
	if ( rtcName === '' ) { return; }
	var log = console.log.bind(console);
	var pc = function(cfg) {
		log('Document tried to create an RTCPeerConnection: %o', cfg);
	};
	var noop = function() {
		;
	};
	pc.prototype = {
		close: noop,
		createDataChannel: noop,
		createOffer: noop,
		setRemoteDescription: noop,
		toString: function() {
			return '[object RTCPeerConnection]';
		}
	};
	var z = window[rtcName];
	window[rtcName] = pc.bind(window);
	if ( z.prototype ) {
		z.prototype.createDataChannel = function(a, b) {
			return {
				close: function() {},
				send: function() {}
			};
		}.bind(null);
	}
})();


# https://www.reddit.com/r/firefox/comments/4wpd23/popads_just_announced_that_they_have_a_new_method/
popads.js application/javascript
alias popads.net.js
alias prevent-popads-net.js
(function() {
	'use strict';
	const magic = String.fromCharCode(Date.now() % 26 + 97) +
				  Math.floor(Math.random() * 982451653 + 982451653).toString(36);
	const oe = window.onerror;
	window.onerror = function(msg, src, line, col, error) {
		if ( typeof msg === 'string' && msg.indexOf(magic) !== -1 ) { return true; }
		if ( oe instanceof Function ) {
			return oe(msg, src, line, col, error);
		}
	}.bind();
	const throwMagic = function() { throw new ReferenceError(magic); };
	delete window.PopAds;
	delete window.popns;
	Object.defineProperties(window, {
		PopAds: { set: throwMagic },
		popns: { set: throwMagic }
	});
})();


# https://github.com/uBlockOrigin/uAssets/issues/503
popads-dummy.js application/javascript
(function() {
	'use strict';
	delete window.PopAds;
	delete window.popns;
	Object.defineProperties(window, {
		PopAds: { value: {} },
		popns: { value: {} }
	});
})();


# https://twitter.com/Scarbir/status/785551814460571648
chartbeat.js application/javascript
alias static.chartbeat.com/chartbeat.js
(function() {
	'use strict';
	const noopfn = function() {
	};
	window.pSUPERFLY = {
		activity: noopfn,
		virtualPage: noopfn
	};
	for ( const hider of document.querySelectorAll('style[id^=chartbeat-flicker-control]') ) {
		hider.remove();
	}
})();


# https://github.com/gorhill/uBlock/issues/2132
abort-on-property-write.js application/javascript
alias aopw.js
(function() {
	var magic = String.fromCharCode(Date.now() % 26 + 97) +
				Math.floor(Math.random() * 982451653 + 982451653).toString(36);
	var prop = '{{1}}',
		owner = window,
		pos;
	for (;;) {
		pos = prop.indexOf('.');
		if ( pos === -1 ) { break; }
		owner = owner[prop.slice(0, pos)];
		if ( owner instanceof Object === false ) { return; }
		prop = prop.slice(pos + 1);
	}
	delete owner[prop];
	Object.defineProperty(owner, prop, {
		set: function() {
			throw new ReferenceError(magic);
		}
	});
	var oe = window.onerror;
	window.onerror = function(msg, src, line, col, error) {
		if ( typeof msg === 'string' && msg.indexOf(magic) !== -1 ) {
			return true;
		}
		if ( oe instanceof Function ) {
			return oe(msg, src, line, col, error);
		}
	}.bind();
})();


abort-on-property-read.js application/javascript
alias aopr.js
(function() {
	var magic = String.fromCharCode(Date.now() % 26 + 97) +
				Math.floor(Math.random() * 982451653 + 982451653).toString(36);
	var abort = function() {
		throw new ReferenceError(magic);
	};
	var chain = '{{1}}', owner = window, pos, desc;
	var makeProxy = function(owner, chain) {
		pos = chain.indexOf('.');
		if ( pos === -1 ) {
			desc = Object.getOwnPropertyDescriptor(owner, chain);
			if ( !desc || desc.get !== abort ) {
				Object.defineProperty(owner, chain, { get: abort, set: function(){} });
			}
			return;
		}
		var prop = chain.slice(0, pos),
			v = owner[prop];
		chain = chain.slice(pos + 1); 
		if ( v ) {
			makeProxy(v, chain);
			return;
		}
		desc = Object.getOwnPropertyDescriptor(owner, prop);
		if ( desc && desc.set && desc.set.hasOwnProperty(magic) ) {
			return;
		}
		var setter = function(a) {
			v = a;
			if ( a instanceof Object ) {
				makeProxy(a, chain);
			}
		};
		setter[magic] = undefined;
		Object.defineProperty(owner, prop, {
			get: function() { return v; },
			set: setter
		});
	};
	makeProxy(owner, chain);
	var oe = window.onerror;
	window.onerror = function(msg, src, line, col, error) {
		if ( typeof msg === 'string' && msg.indexOf(magic) !== -1 ) {
			return true;
		}
		if ( oe instanceof Function ) {
			return oe(msg, src, line, col, error);
		}
	}.bind();
})();


abort-on-stack-trace.js application/javascript
alias aost.js
(function() {
	let chain = '{{1}}';
	let needle = '{{2}}';
	let logLevel = '{{3}}';
	const reRegexEscape = /[.*+?^${}()|[\]\\]/g;
	if ( needle === '' || needle === '{{2}}' ) {
		needle = '^';
	} else if ( /^\/.+\/$/.test(needle) ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(reRegexEscape, '\\$&');
	}
	const reNeedle = new RegExp(needle);
	const magic = String.fromCharCode(Math.random() * 26 + 97) +
		Math.floor(
			(0.25 + Math.random() * 0.75) * Number.MAX_SAFE_INTEGER
		).toString(36).slice(-8);
	const log = console.log.bind(console);
	const ErrorCtor = self.Error;
	const mustAbort = function(err) {
		let docURL = self.location.href;
		const pos = docURL.indexOf('#');
		if ( pos !== -1 ) {
			docURL = docURL.slice(0, pos);
		}
		// Normalize stack trace
		const lines = [];
		for ( let line of err.stack.split(/[\n\r]+/) ) {
			if ( line.includes(magic) ) { continue; }
			line = line.trim();
			let match = /(.*?@)?(\S+)(:\d+):\d+\)?$/.exec(line);
			if ( match === null ) { continue; }
			let url = match[2];
			if ( url.startsWith('(') ) { url = url.slice(1); }
			if ( url === docURL ) {
				url = 'inlineScript';
			} else if ( url.startsWith('<anonymous>') ) {
				url = 'injectedScript';
			}
			let fn = match[1] !== undefined
				? match[1].slice(0, -1)
				: line.slice(0, match.index).trim();
			if ( fn.startsWith('at') ) { fn = fn.slice(2).trim(); }
			let rowcol = match[3];
			lines.push(' ' + `${fn} ${url}${rowcol}:1`.trim());
		}
		lines[0] = `stackDepth:${lines.length-1}`;
		const stack = lines.join('\t');
		const r = reNeedle.test(stack);
		if (
			logLevel === '1' ||
			logLevel === '2' && r ||
			logLevel === '3' && !r
		) {
			log(stack.replace(/\t/g, '\n'));
		}
		return r;
	};
	const makeProxy = function(owner, chain) {
		const pos = chain.indexOf('.');
		if ( pos === -1 ) {
			let v = owner[chain];
			Object.defineProperty(owner, chain, {
				get: function() {
					if ( mustAbort(new ErrorCtor(magic)) ) {
						throw new ReferenceError(magic);
					}
					return v;
				},
				set: function(a) {
					if ( mustAbort(new ErrorCtor(magic)) ) {
						throw new ReferenceError(magic);
					}
					v = a;
				},
			});
			return;
		}
		const prop = chain.slice(0, pos);
		let v = owner[prop];
		chain = chain.slice(pos + 1);
		if ( v ) {
			makeProxy(v, chain);
			return;
		}
		const desc = Object.getOwnPropertyDescriptor(owner, prop);
		if ( desc && desc.set !== undefined ) { return; }
		Object.defineProperty(owner, prop, {
			get: function() { return v; },
			set: function(a) {
				v = a;
				if ( a instanceof Object ) {
					makeProxy(a, chain);
				}
			}
		});
	};
	const owner = window;
	makeProxy(owner, chain);
	const oe = window.onerror;
	window.onerror = function(msg, src, line, col, error) {
		if ( typeof msg === 'string' && msg.indexOf(magic) !== -1 ) {
			return true;
		}
		if ( oe instanceof Function ) {
			return oe(msg, src, line, col, error);
		}
	}.bind();
})();


# https://github.com/gorhill/uBlock/commit/9367a6015b8cbb6b49347b00a105aab8f24df861
no-setTimeout-if.js application/javascript
alias nostif.js
alias prevent-setTimeout.js
alias setTimeout-defuser.js
(function() {
	let needle = '{{1}}';
	const needleNot = needle.charAt(0) === '!';
	if ( needleNot ) { needle = needle.slice(1); }
	let delay = '{{2}}';
	if ( delay === '{{2}}' ) { delay = undefined; }
	let delayNot = false;
	if ( delay !== undefined ) {
		delayNot = delay.charAt(0) === '!';
		if ( delayNot ) { delay = delay.slice(1); }
		delay = parseInt(delay, 10);
	}
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '';
	} else if ( needle.startsWith('/') && needle.endsWith('/') ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	const log = needleNot === false && needle === '' && delay === undefined
		? console.log
		: undefined;
	const reNeedle = new RegExp(needle);
	window.setTimeout = new Proxy(window.setTimeout, {
		apply: function(target, thisArg, args) {
			const a = String(args[0]);
			const b = args[1];
			if ( log !== undefined ) {
				log('uBO: setTimeout("%s", %s)', a, b);
			} else {
				let defuse;
				if ( needle !== '' ) {
					defuse = reNeedle.test(a) !== needleNot;
				}
				if ( defuse !== false && delay !== undefined ) {
					defuse = (b === delay || isNaN(b) && isNaN(delay) ) !== delayNot;
				}
				if ( defuse ) {
					args[0] = function(){};
				}
			}
			return target.apply(thisArg, args);
		}
	});
})();


# https://github.com/gorhill/uBlock/commit/9367a6015b8cbb6b49347b00a105aab8f24df861
no-setInterval-if.js application/javascript
alias nosiif.js
alias prevent-setInterval.js
alias setInterval-defuser.js
(function() {
	let needle = '{{1}}';
	const needleNot = needle.charAt(0) === '!';
	if ( needleNot ) { needle = needle.slice(1); }
	let delay = '{{2}}';
	if ( delay === '{{2}}' ) { delay = undefined; }
	let delayNot = false;
	if ( delay !== undefined ) {
		delayNot = delay.charAt(0) === '!';
		if ( delayNot ) { delay = delay.slice(1); }
		delay = parseInt(delay, 10);
	}
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '';
	} else if ( needle.startsWith('/') && needle.endsWith('/') ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	const log = needleNot === false && needle === '' && delay === undefined
		? console.log
		: undefined;
	const reNeedle = new RegExp(needle);
	window.setInterval = new Proxy(window.setInterval, {
		apply: function(target, thisArg, args) {
			const a = String(args[0]);
			const b = args[1];
			if ( log !== undefined ) {
				log('uBO: setInterval("%s", %s)', a, b);
			} else {
				let defuse;
				if ( needle !== '' ) {
					defuse = reNeedle.test(a) !== needleNot;
				}
				if ( defuse !== false && delay !== undefined ) {
					defuse = (b === delay || isNaN(b) && isNaN(delay) ) !== delayNot;
				}
				if ( defuse ) {
					args[0] = function(){};
				}
			}
			return target.apply(thisArg, args);
		}
	});
})();


# https://github.com/gorhill/uBlock/commit/2fd86a66fcc2665e5672cc5862e24b3782ee7504
#
#  When no "prune paths" argument is provided, the scriptlet is
#  used for logging purpose and the "needle paths" argument is
#  used to filter logging output.
#
#  https://github.com/uBlockOrigin/uBlock-issues/issues/1545
#  - Add support for "remove everything if needle matches" case
json-prune.js application/javascript
(function() {
	const rawPrunePaths = '{{1}}';
	const rawNeedlePaths = '{{2}}';
	const prunePaths = rawPrunePaths !== '{{1}}' && rawPrunePaths !== ''
		? rawPrunePaths.split(/ +/)
		: [];
	let needlePaths;
	let log, reLogNeedle;
	if ( prunePaths.length !== 0 ) {
		needlePaths = prunePaths.length !== 0 &&
					  rawNeedlePaths !== '{{2}}' && rawNeedlePaths !== ''
			? rawNeedlePaths.split(/ +/)
			: [];
	} else {
		log = console.log.bind(console);
		let needle;
		if ( rawNeedlePaths === '' || rawNeedlePaths === '{{2}}' ) {
			needle = '.?';
		} else if ( rawNeedlePaths.charAt(0) === '/' && rawNeedlePaths.slice(-1) === '/' ) {
			needle = rawNeedlePaths.slice(1, -1);
		} else {
			needle = rawNeedlePaths.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
		}
		reLogNeedle = new RegExp(needle);
	}
	const findOwner = function(root, path, prune = false) {
		let owner = root;
		let chain = path;
		for (;;) {
			if ( typeof owner !== 'object' || owner === null  ) {
				return false;
			}
			const pos = chain.indexOf('.');
			if ( pos === -1 ) {
				if ( prune === false ) {
					return owner.hasOwnProperty(chain);
				}
				if ( chain === '*' ) {
					for ( let key in owner ) {
						if ( owner.hasOwnProperty(key) === false ) { continue; }
						delete owner[key];
					}
				} else if ( owner.hasOwnProperty(chain) ) {
					delete owner[chain];
				}
				return true;
			}
			const prop = chain.slice(0, pos);
			if (
				prop === '[]' && Array.isArray(owner) ||
				prop === '*' && owner instanceof Object
			) {
				const next = chain.slice(pos + 1);
				let found = false;
				for ( let key of Object.keys(owner) ) {
					found = findOwner(owner[key], next, prune) || found;
				}
				return found;
			}
			if ( owner.hasOwnProperty(prop) === false ) { return false; }
			owner = owner[prop];
			chain = chain.slice(pos + 1);
		}
	};
	const mustProcess = function(root) {
		for ( let needlePath of needlePaths ) {
			if ( findOwner(root, needlePath) === false ) {
				return false;
			}
		}
		return true;
	};
	const pruner = function(o) {
		if ( log !== undefined ) {
			const json = JSON.stringify(o, null, 2);
			if ( reLogNeedle.test(json) ) {
				log('uBO:', location.hostname, json);
			}
			return o;
		}
		if ( mustProcess(o) === false ) { return o; }
		for ( let path of prunePaths ) {
			findOwner(o, path, true);
		}
		return o;
	};
	JSON.parse = new Proxy(JSON.parse, {
		apply: function() {
			return pruner(Reflect.apply(...arguments));
		},
	});
	Response.prototype.json = new Proxy(Response.prototype.json, {
		apply: function() {
			return Reflect.apply(...arguments).then(o => pruner(o));
		},
	});
})();


# https://github.com/uBlockOrigin/uAssets/issues/521
# https://github.com/uBlockOrigin/uAssets/issues/9123#issuecomment-848255120
addEventListener-defuser.js application/javascript
alias aeld.js
alias prevent-addEventListener.js
(function() {
	let needle1 = '{{1}}';
	if ( needle1 === '' || needle1 === '{{1}}' ) {
		needle1 = '.?';
	} else if ( /^\/.+\/$/.test(needle1) ) {
		needle1 = needle1.slice(1,-1);
	} else {
		needle1 = needle1.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle1 = new RegExp(needle1);
	let needle2 = '{{2}}';
	if ( needle2 === '' || needle2 === '{{2}}' ) {
		needle2 = '.?';
	} else if ( /^\/.+\/$/.test(needle2) ) {
		needle2 = needle2.slice(1,-1);
	} else {
		needle2 = needle2.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle2 = new RegExp(needle2);
	self.EventTarget.prototype.addEventListener = new Proxy(
		self.EventTarget.prototype.addEventListener,
		{
			apply: function(target, thisArg, args) {
				let type, handler;
				try {
					type = String(args[0]);
					handler = String(args[1]);
				} catch(ex) {
				}
				if (
					needle1.test(type) === false ||
					needle2.test(handler) === false
				) {
					return target.apply(thisArg, args);
				}
			}
		}
	);
})();


# https://github.com/uBlockOrigin/uAssets/issues/618
abort-current-script.js application/javascript
alias acs.js
alias abort-current-inline-script.js
alias acis.js
(function() {
	var target = '{{1}}';
	if ( target === '' || target === '{{1}}' ) { return; }
	var needle = '{{2}}', reText = '.?';
	if ( needle !== '' && needle !== '{{2}}' ) {
		reText = /^\/.+\/$/.test(needle)
			? needle.slice(1,-1)
			: needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	var thisScript = document.currentScript;
	var re = new RegExp(reText);
	var chain = target.split('.');
	var owner = window, prop;
	for (;;) {
		prop = chain.shift();
		if ( chain.length === 0 ) { break; }
		owner = owner[prop];
		if ( owner instanceof Object === false ) { return; }
	}
	var value;
	var desc = Object.getOwnPropertyDescriptor(owner, prop);
	if (
		desc instanceof Object === false ||
		desc.get instanceof Function === false
	) {
		value = owner[prop];
		desc = undefined;
	}
	var magic = String.fromCharCode(Date.now() % 26 + 97) +
				Math.floor(Math.random() * 982451653 + 982451653).toString(36);
	var validate = function() {
		var e = document.currentScript;
		if (
			e instanceof HTMLScriptElement &&
			e.src === '' &&
			e !== thisScript &&
			re.test(e.textContent)
		) {
			throw new ReferenceError(magic);
		}
	};
	Object.defineProperty(owner, prop, {
		get: function() {
			validate();
			return desc instanceof Object
				? desc.get.call(owner)
				: value;
		},
		set: function(a) {
			validate();
			if ( desc instanceof Object ) {
				desc.set.call(owner, a);
			} else {
				value = a;
			}
		}
	});
	var oe = window.onerror;
	window.onerror = function(msg) {
		if ( typeof msg === 'string' && msg.indexOf(magic) !== -1 ) {
			return true;
		}
		if ( oe instanceof Function ) {
			return oe.apply(this, arguments);
		}
	}.bind();
})();


# https://github.com/gorhill/uBlock/commit/b27848a060eee961e2403192097448467b3bc7b5
no-window-open-if.js application/javascript
alias nowoif.js
alias prevent-window-open.js
alias window.open-defuser.js
(function() {
	let arg1 = '{{1}}';
	if ( arg1 === '{{1}}' ) { arg1 = ''; }
	let arg2 = '{{2}}';
	if ( arg2 === '{{2}}' ) { arg2 = ''; }
	let arg3 = '{{3}}';
	if ( arg3 === '{{3}}' ) { arg3 = ''; }
	const log = /\blog\b/.test(arg3)
		? console.log.bind(console)
		: ( ) => { };
	const newSyntax = /^[01]?$/.test(arg1) === false;
	let pattern = '';
	let targetResult = true;
	let autoRemoveAfter = -1;
	if ( newSyntax ) {
		pattern = arg1;
		if ( pattern.startsWith('!') ) {
			targetResult = false;
			pattern = pattern.slice(1);
		}
		autoRemoveAfter = parseInt(arg2);
		if ( isNaN(autoRemoveAfter) ) {
			autoRemoveAfter = -1;
		} 
	} else {
		pattern = arg2;
		if ( arg1 === '0' ) {
			targetResult = false;
		}
	}
	if ( pattern === '' ) {
		pattern = '.?';
	} else if ( /^\/.+\/$/.test(pattern) ) {
		pattern = pattern.slice(1,-1);
	} else {
		pattern = pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	const rePattern = new RegExp(pattern);
	const createDecoy = function(tag, urlProp, url) {
		const decoy = document.createElement(tag);
		decoy[urlProp] = url;
		decoy.style.setProperty('height','1px', 'important');
		decoy.style.setProperty('position','fixed', 'important');
		decoy.style.setProperty('top','-1px', 'important');
		decoy.style.setProperty('width','1px', 'important');
		document.body.appendChild(decoy);
		setTimeout(( ) => decoy.remove(), autoRemoveAfter * 1000);
		return decoy;
	};
	window.open = new Proxy(window.open, {
		apply: function(target, thisArg, args) {
			log('window.open:', ...args);
			const url = args[0];
			if ( rePattern.test(url) !== targetResult ) {
				return target.apply(thisArg, args);
			}
			if ( autoRemoveAfter < 0 ) { return null; }
			const decoy = /\bobj\b/.test(arg3)
				? createDecoy('object', 'data', url)
				: createDecoy('iframe', 'src', url);
			let popup = decoy.contentWindow;
			if ( typeof popup === 'object' && popup !== null ) {
				Object.defineProperty(popup, 'closed', { value: false });
			} else {
				const noopFunc = (function(){}).bind(self);
				popup = new Proxy(self, {
					get: function(target, prop) {
						if ( prop === 'closed' ) { return false; }
						const r = Reflect.get(...arguments);
						if ( typeof r === 'function' ) { return noopFunc; }
						return target[prop];
					},
					set: function() {
						return Reflect.set(...arguments);
					},
				});
			}
			if ( /\blog\b/.test(arg3) ) {
				popup = new Proxy(popup, {
					get: function(target, prop) {
						log('window.open / get', prop, '===', target[prop]);
						return Reflect.get(...arguments);
					},
					set: function(target, prop, value) {
						log('window.open / set', prop, '=', value);
						return Reflect.set(...arguments);
					},
				});
			}
			return popup;
		}
	});
})();


# https://github.com/uBlockOrigin/uAssets/issues/913
disable-newtab-links.js application/javascript
(function() {
	document.addEventListener('click', function(ev) {
		var target = ev.target;
		while ( target !== null ) {
			if ( target.localName === 'a' && target.hasAttribute('target') ) {
				ev.stopPropagation();
				ev.preventDefault();
				break;
			}
			target = target.parentNode;
		}
	});
})();


set-constant.js application/javascript
alias set.js
(function() {
	const chain = '{{1}}';
	let cValue = '{{2}}';
	const thisScript = document.currentScript;
	if ( cValue === 'undefined' ) {
		cValue = undefined;
	} else if ( cValue === 'false' ) {
		cValue = false;
	} else if ( cValue === 'true' ) {
		cValue = true;
	} else if ( cValue === 'null' ) {
		cValue = null;
	} else if ( cValue === "''" ) {
		cValue = '';
	} else if ( cValue === '[]' ) {
		cValue = [];
	} else if ( cValue === '{}' ) {
		cValue = {};
	} else if ( cValue === 'noopFunc' ) {
		cValue = function(){};
	} else if ( cValue === 'trueFunc' ) {
		cValue = function(){ return true; };
	} else if ( cValue === 'falseFunc' ) {
		cValue = function(){ return false; };
	} else if ( /^\d+$/.test(cValue) ) {
		cValue = parseFloat(cValue);
		if ( isNaN(cValue) ) { return; }
		if ( Math.abs(cValue) > 0x7FFF ) { return; }
	} else {
		return;
	}
	let aborted = false;
	const mustAbort = function(v) {
		if ( aborted ) { return true; }
		aborted =
			(v !== undefined && v !== null) &&
			(cValue !== undefined && cValue !== null) &&
			(typeof v !== typeof cValue);
		return aborted;
	};
	// https://github.com/uBlockOrigin/uBlock-issues/issues/156
	//   Support multiple trappers for the same property.
	const trapProp = function(owner, prop, configurable, handler) {
		if ( handler.init(owner[prop]) === false ) { return; }
		const odesc = Object.getOwnPropertyDescriptor(owner, prop);
		let prevGetter, prevSetter;
		if ( odesc instanceof Object ) {
			if ( odesc.configurable === false ) { return; }
			if ( odesc.get instanceof Function ) {
				prevGetter = odesc.get;
			}
			if ( odesc.set instanceof Function ) {
				prevSetter = odesc.set;
			}
		}
		Object.defineProperty(owner, prop, {
			configurable,
			get() {
				if ( prevGetter !== undefined ) {
					prevGetter();
				}
				return handler.getter(); // cValue
			},
			set(a) {
				if ( prevSetter !== undefined ) {
					prevSetter(a);
				}
				handler.setter(a);
			}
		});
	};
	const trapChain = function(owner, chain) {
		const pos = chain.indexOf('.');
		if ( pos === -1 ) {
			trapProp(owner, chain, false, {
				v: undefined,
				init: function(v) {
					if ( mustAbort(v) ) { return false; }
					this.v = v;
					return true;
				},
				getter: function() {
					return document.currentScript === thisScript
						? this.v
						: cValue;
				},
				setter: function(a) {
					if ( mustAbort(a) === false ) { return; }
					cValue = a;
				}
			});
			return;
		}
		const prop = chain.slice(0, pos);
		const v = owner[prop];
		chain = chain.slice(pos + 1);
		if ( v instanceof Object || typeof v === 'object' && v !== null ) {
			trapChain(v, chain);
			return;
		}
		trapProp(owner, prop, true, {
			v: undefined,
			init: function(v) {
				this.v = v;
				return true;
			},
			getter: function() {
				return this.v;
			},
			setter: function(a) {
				this.v = a;
				if ( a instanceof Object ) {
					trapChain(a, chain);
				}
			}
		});
	};
	trapChain(window, chain);
})();


# Imported from:
# https://github.com/NanoAdblocker/NanoFilters/blob/1f3be7211bb0809c5106996f52564bf10c4525f7/NanoFiltersSource/NanoResources.txt#L82
#
# Speed up or down setTimeout, 3 optional arguments.
# funcMatcher
#      The payload matcher, a string literal or a JavaScript RegExp, defaults
#      to match all.
# delayMatcher
#      The delay matcher, an integer, defaults to 1000.
#      Use `*` to match any delay.
# boostRatio - The delay multiplier when there is a match, 0.5 speeds up by
#      2 times and 2 slows down by 2 times, defaults to 0.05 or speed up
#      20 times. Speed up and down both cap at 50 times.
adjust-setTimeout.js application/javascript
alias nano-setTimeout-booster.js
alias nano-stb.js
(function() {
	let needleArg = '{{1}}';
	if ( needleArg === '{{1}}' ) { needleArg = ''; }
	let delayArg = '{{2}}';
	if ( delayArg === '{{2}}' ) { delayArg = ''; }
	let boostArg = '{{3}}';
	if ( boostArg === '{{3}}' ) { boostArg = ''; }
	if ( needleArg === '' ) {
		needleArg = '.?';
	} else if ( needleArg.charAt(0) === '/' && needleArg.slice(-1) === '/' ) {
		needleArg = needleArg.slice(1, -1);
	} else {
		needleArg = needleArg.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	const reNeedle = new RegExp(needleArg);
	let delay = delayArg !== '*' ? parseInt(delayArg, 10) : -1;
	if ( isNaN(delay) || isFinite(delay) === false ) { delay = 1000; }
	let boost = parseFloat(boostArg);
	boost = isNaN(boost) === false && isFinite(boost)
		? Math.min(Math.max(boost, 0.02), 50)
		: 0.05;
	self.setTimeout = new Proxy(self.setTimeout, {
		apply: function(target, thisArg, args) {
			const [ a, b ] = args;
			if (
				(delay === -1 || b === delay) &&
				reNeedle.test(a.toString())
			) {
				args[1] = b * boost;
			}
			return target.apply(thisArg, args);
		}
	});
})();


# Imported from:
# https://github.com/NanoAdblocker/NanoFilters/blob/1f3be7211bb0809c5106996f52564bf10c4525f7/NanoFiltersSource/NanoResources.txt#L126
#
# Speed up or down setInterval, 3 optional arguments.
#      The payload matcher, a string literal or a JavaScript RegExp, defaults
#      to match all.
# delayMatcher
#      The delay matcher, an integer, defaults to 1000.
#      Use `*` to match any delay.
# boostRatio - The delay multiplier when there is a match, 0.5 speeds up by
#      2 times and 2 slows down by 2 times, defaults to 0.05 or speed up
#      20 times. Speed up and down both cap at 50 times.
adjust-setInterval.js application/javascript
alias nano-setInterval-booster.js
alias nano-sib.js
(function() {
	let needleArg = '{{1}}';
	if ( needleArg === '{{1}}' ) { needleArg = ''; }
	let delayArg = '{{2}}';
	if ( delayArg === '{{2}}' ) { delayArg = ''; }
	let boostArg = '{{3}}';
	if ( boostArg === '{{3}}' ) { boostArg = ''; }
	if ( needleArg === '' ) {
		needleArg = '.?';
	} else if ( needleArg.charAt(0) === '/' && needleArg.slice(-1) === '/' ) {
		needleArg = needleArg.slice(1, -1);
	} else {
		needleArg = needleArg.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	const reNeedle = new RegExp(needleArg);
	let delay = delayArg !== '*' ? parseInt(delayArg, 10) : -1;
	if ( isNaN(delay) || isFinite(delay) === false ) { delay = 1000; }
	let boost = parseFloat(boostArg);
	boost = isNaN(boost) === false && isFinite(boost)
		? Math.min(Math.max(boost, 0.02), 50)
		: 0.05;
	self.setInterval = new Proxy(self.setInterval, {
		apply: function(target, thisArg, args) {
			const [ a, b ] = args;
			if (
				(delay === -1 || b === delay) &&
				reNeedle.test(a.toString())
			) {
				args[1] = b * boost;
			}
			return target.apply(thisArg, args);
		}
	});
})();


prevent-fetch.js application/javascript
alias no-fetch-if.js
(function() {
	let arg1 = '{{1}}';
	if ( arg1 === '{{1}}' ) { arg1 = ''; }
	const needles = [];
	for ( let condition of arg1.split(/\s+/) ) {
		if ( condition === '' ) { continue; }
		const pos = condition.indexOf(':');
		let key, value;
		if ( pos !== -1 ) {
			key = condition.slice(0, pos);
			value = condition.slice(pos + 1);
		} else {
			key = 'url';
			value = condition;
		}
		if ( value === '' ) {
			value = '^';
		} else if ( value.startsWith('/') && value.endsWith('/') ) {
			value = value.slice(1, -1);
		} else {
			value = value.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
		}
		needles.push({ key, re: new RegExp(value) });
	}
	const log = needles.length === 0 ? console.log.bind(console) : undefined;
	self.fetch = new Proxy(self.fetch, {
		apply: function(target, thisArg, args) {
			let proceed = true;
			try {
				let details;
				if ( args[0] instanceof self.Request ) {
					details = args[0];
				} else {
					details = Object.assign({ url: args[0] }, args[1]);
				}
				const props = new Map();
				for ( let prop in details ) {
					let v = details[prop];
					if ( typeof v !== 'string' ) {
						try { v = JSON.stringify(v); }
						catch(ex) { }
					}
					if ( typeof v !== 'string' ) { continue; }
					props.set(prop, v);
				}
				if ( log !== undefined ) {
					const out = Array.from(props)
									 .map(a => `${a[0]}:${a[1]}`)
									 .join(' ');
					log(`uBO: fetch(${out})`);
				}
				proceed = needles.length === 0;
				for ( let { key, re } of needles ) {
					if (
						props.has(key) === false ||
						re.test(props.get(key)) === false
					) {
						proceed = true;
						break;
					}
				}
			} catch(ex) {
			}
			return proceed
				? Reflect.apply(target, thisArg, args)
				: Promise.resolve(new Response());
		}
	});
})();


remove-attr.js application/javascript
alias ra.js
(function() {
	const token = '{{1}}';
	if ( token === '' || token === '{{1}}' ) { return; }
	const tokens = token.split(/\s*\|\s*/);
	let selector = '{{2}}';
	if ( selector === '' || selector === '{{2}}' ) {
		selector = `[${tokens.join('],[')}]`;
	}
	let behavior = '{{3}}';
	let timer;
	const rmattr = ( ) => {
		timer = undefined;
		try {
			const nodes = document.querySelectorAll(selector);
			for ( let node of nodes ) {
				for ( let attr of tokens ) {
					node.removeAttribute(attr);
				}
			}
		} catch(ex) {
		}
	};
	const mutationHandler = mutations => {
		if ( timer !== undefined ) { return; }
		let skip = true;
		for ( let i = 0; i < mutations.length && skip; i++ ) {
			const { type, addedNodes, removedNodes } = mutations[i];
			if ( type === 'attributes' ) { skip = false; }
			for ( let j = 0; j < addedNodes.length && skip; j++ ) {
				if ( addedNodes[j].nodeType === 1 ) { skip = false; break; }
			}
			for ( let j = 0; j < removedNodes.length && skip; j++ ) {
				if ( removedNodes[j].nodeType === 1 ) { skip = false; break; }
			}
		}
		if ( skip ) { return; }
		if ( 'requestIdleCallback' in self ) {
			timer = self.requestIdleCallback(rmattr, { timeout: 67 });
		} else {
			timer = self.setTimeout(rmattr, 1);
		}
	};
	const start = ( ev ) => {
		if ( ev ) { self.removeEventListener(ev.type, rmattr, true); }
		rmattr();
		if ( /\bstay\b/.test(behavior) === false ) { return; }
		const observer = new MutationObserver(mutationHandler);
		observer.observe(document.documentElement, {
			attributes: true,
			attributeFilter: tokens,
			childList: true,
			subtree: true,
		});
	};
	if ( document.readyState !== 'complete' && /\bcomplete\b/.test(behavior) ) {
		self.addEventListener('load', start, true);
	} else if ( document.readyState === 'loading' ) {
		self.addEventListener('DOMContentLoaded', start, true);
	} else {
		start();
	}
})();


remove-class.js application/javascript
alias rc.js
(function() {
	const token = '{{1}}';
	if ( token === '' || token === '{{1}}' ) { return; }
	const tokens = token.split(/\s*\|\s*/);
	let selector = '{{2}}';
	if ( selector === '' || selector === '{{2}}' ) {
		selector = '.' + tokens.map(a => CSS.escape(a)).join(',.');
	}
	let behavior = '{{3}}';
	let timer;
	const rmclass = function() {
		timer = undefined;
		try {
			const nodes = document.querySelectorAll(selector);
			for ( let node of nodes ) {
				node.classList.remove(...tokens);
			}
		} catch(ex) {
		}
	};
	const mutationHandler = mutations => {
		if ( timer !== undefined ) { return; }
		let skip = true;
		for ( let i = 0; i < mutations.length && skip; i++ ) {
			const { type, addedNodes, removedNodes } = mutations[i];
			if ( type === 'attributes' ) { skip = false; }
			for ( let j = 0; j < addedNodes.length && skip; j++ ) {
				if ( addedNodes[j].nodeType === 1 ) { skip = false; break; }
			}
			for ( let j = 0; j < removedNodes.length && skip; j++ ) {
				if ( removedNodes[j].nodeType === 1 ) { skip = false; break; }
			}
		}
		if ( skip ) { return; }
		timer = self.requestIdleCallback(rmclass, { timeout: 67 });
	};
	const start = ( ) => {
		rmclass();
		if ( /\bstay\b/.test(behavior) === false ) { return; }
		const observer = new MutationObserver(mutationHandler);
		observer.observe(document.documentElement, {
			attributes: true,
			attributeFilter: [ 'class' ],
			childList: true,
			subtree: true,
		});
	};
	if ( document.readyState !== 'complete' && /\bcomplete\b/.test(behavior) ) {
		self.addEventListener('load', start, { once: true });
	} else if ( document.readyState === 'loading' ) {
		self.addEventListener('DOMContentLoaded', start, { once: true });
	} else {
		start();
	}
})();


# https://github.com/gorhill/uBlock/commit/6831967f5f9d64412a9c063f3b64104d9dce7b07
requestAnimationFrame-if.js application/javascript
(function() {
	let needle = '{{1}}';
	const not = needle.charAt(0) === '!';
	if ( not ) { needle = needle.slice(1); }
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.startsWith('/') && needle.endsWith('/') ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	const log = needle === '.?' && not === false ? console.log : undefined;
	needle = new RegExp(needle);
	window.requestAnimationFrame = new Proxy(window.requestAnimationFrame, {
		apply: function(target, thisArg, args) {
			const a = String(args[0]);
			if ( log !== undefined ) {
				log('uBO: requestAnimationFrame("%s")', a);
			} else if ( needle.test(a) === not ) {
				args[0] = function(){};
			}
			return target.apply(thisArg, args);
		}
	});
})();


# https://github.com/gorhill/uBlock/commit/1de0e820b87fdd3717b9f2653baaa7a934075055
no-requestAnimationFrame-if.js application/javascript
alias norafif.js
alias prevent-requestAnimationFrame.js
(function() {
	let needle = '{{1}}';
	if ( needle === '{{1}}' ) { needle = ''; }
	const needleNot = needle.charAt(0) === '!';
	if ( needleNot ) { needle = needle.slice(1); }
	if ( needle.startsWith('/') && needle.endsWith('/') ) {
		needle = needle.slice(1, -1);
	} else if ( needle !== '' ) {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	const log = needleNot === false && needle === '' ? console.log : undefined;
	const reNeedle = new RegExp(needle);
	window.requestAnimationFrame = new Proxy(window.requestAnimationFrame, {
		apply: function(target, thisArg, args) {
			const a = String(args[0]);
			let defuse = false;
			if ( log !== undefined ) {
				log('uBO: requestAnimationFrame("%s")', a);
			} else {
				defuse = reNeedle.test(a) !== needleNot;
			}
			if ( defuse ) {
				args[0] = function(){};
			}
			return target.apply(thisArg, args);
		}
	});
})();


# https://github.com/uBlockOrigin/uAssets/issues/2912
# Reference:
# https://github.com/fingerprintjs/fingerprintjs/tree/v2
fingerprint2.js application/javascript
(function() {
	'use strict';
	const hex32 = len => {
		return Math.floor(Math.random() * Number.MAX_SAFE_INTEGER)
			.toString(16)
			.slice(-len)
			.padStart(len, '0');
	};
	const browserId = `${hex32(8)}${hex32(8)}${hex32(8)}${hex32(8)}`;
	const fp2 = function(){};
	fp2.get = function(opts, cb) {
		if ( !cb  ) { cb = opts; }
		setTimeout(( ) => { cb([]); }, 1);
	};
	fp2.getPromise = function() {
		return Promise.resolve([]);
	};
	fp2.getV18 = function() {
		return browserId;
	};
	fp2.x64hash128 = function() {
		return browserId;
	};
	fp2.prototype = {
		get: function(opts, cb) {
			if ( !cb  ) { cb = opts; }
			setTimeout(( ) => { cb(browserId, []); }, 1);
		},
	};
	self.Fingerprint2 = fp2;
})();


fingerprint3.js application/javascript
(function() {
	'use strict';
	const visitorId = (( ) => {
		let id = '';
		for ( let i = 0; i < 8; i++ ) {
			id += (Math.random() * 0x10000 + 0x1000 | 0).toString(16).slice(-4);
		}
		return id;
	})();
	const FingerprintJS = class {
		static hashComponents() {
			return visitorId;
		}
		static load() {
			return Promise.resolve(new FingerprintJS());
		}
		get() {
			return Promise.resolve({
				visitorId,
			});
		}
	};
	window.FingerprintJS = FingerprintJS;
})();


# https://github.com/NanoAdblocker/NanoFilters/issues/149
remove-cookie.js application/javascript
alias cookie-remover.js
(function() {
	const needle = '{{1}}';
	let reName = /./;
	if ( /^\/.+\/$/.test(needle) ) {
		reName = new RegExp(needle.slice(1,-1));
	} else if ( needle !== '' && needle !== '{{1}}' ) {
		reName = new RegExp(needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'));
	}
	const removeCookie = function() {
		document.cookie.split(';').forEach(cookieStr => {
			let pos = cookieStr.indexOf('=');
			if ( pos === -1 ) { return; }
			let cookieName = cookieStr.slice(0, pos).trim();
			if ( !reName.test(cookieName) ) { return; }
			let part1 = cookieName + '=';
			let part2a = '; domain=' + document.location.hostname;
			let part2b = '; domain=.' + document.location.hostname;
			let part2c, part2d;
			let domain = document.domain;
			if ( domain ) {
				if ( domain !== document.location.hostname ) {
					part2c = '; domain=.' + domain;
				}
				if ( domain.startsWith('www.') ) {
					part2d = '; domain=' + domain.replace('www', '');
				}
			}
			let part3 = '; path=/';
			let part4 = '; Max-Age=-1000; expires=Thu, 01 Jan 1970 00:00:00 GMT';
			document.cookie = part1 + part4;
			document.cookie = part1 + part2a + part4;
			document.cookie = part1 + part2b + part4;
			document.cookie = part1 + part3 + part4;
			document.cookie = part1 + part2a + part3 + part4;
			document.cookie = part1 + part2b + part3 + part4;
			if ( part2c !== undefined ) {
				document.cookie = part1 + part2c + part3 + part4;
			}
			if ( part2d !== undefined ) {
				document.cookie = part1 + part2d + part3 + part4;
			}
		});
	};
	removeCookie();
	window.addEventListener('beforeunload', removeCookie);
})();


# https://www.reddit.com/r/firefox/comments/9dudod/the_mysterious_case_of_missing_urls_and_googles/e5kgkkh
ampproject_v0.js application/javascript
alias ampproject.org/v0.js
(function() {
	'use strict';
	const head = document.head;
	if ( !head ) { return; }
	const style = document.createElement('style');
	style.textContent = [
		'body {',
		'  animation: none !important;',
		'  overflow: unset !important;',
		'}'
	].join('\n');
	head.appendChild(style);
})();


# https://github.com/gorhill/uBlock/commit/f842ab6d3c1cf0394f95d27092bf59627262da40
# https://www.reddit.com/r/uBlockOrigin/comments/ghjqph/
# https://github.com/NanoMeow/QuickReports/issues/3717
amazon_apstag.js application/javascript
(function() {
	'use strict';
	const noopfn = function() {
		; // jshint ignore:line
	}.bind();
	const apstag = {
		fetchBids: function(a, b) {
			if ( b instanceof Function ) {
				b([]);
			}
		},
		init: noopfn,
		setDisplayBids: noopfn,
		targetingKeys: noopfn,
	};
	window.apstag = apstag;
})();
